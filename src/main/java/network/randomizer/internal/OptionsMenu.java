/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package network.randomizer.internal;

import java.awt.Component;
import javax.swing.*;
import org.cytoscape.application.CyApplicationManager;
import org.cytoscape.application.swing.CySwingApplication;
import org.cytoscape.application.swing.CytoPanelComponent;
import org.cytoscape.application.swing.CytoPanelName;

/**
 *
 * @author gabriele
 */

//questa classe definisce il comportamento del menu di input ed Ã¨ come se fosse la classe Main. da qua faccio tutto!

public class OptionsMenu extends JPanel implements CytoPanelComponent {
    private final RandomizerCore randomizerCore;
    public CyApplicationManager cyApplicationManager;
    public CySwingApplication cyDesktopService;
    public CyActivator cyActivator;
    public ThreadEngine thread;
    
    public OptionsMenu(RandomizerCore core){
        initComponents();
        cyActivator = core.cyActivator;
        cyApplicationManager = core.cyApplicationManager;
        cyDesktopService = core.cyDesktopService;
        randomizerCore = core;
        StartButton.setEnabled(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     * 
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rbgERModelType = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        Title = new javax.swing.JLabel();
        ProgressBar = new javax.swing.JProgressBar();
        ProgressLabel = new javax.swing.JLabel();
        ExitButton = new javax.swing.JButton();
        chkRandomize = new javax.swing.JCheckBox();
        StartButton = new javax.swing.JToggleButton();
        rbNpType = new javax.swing.JRadioButton();
        rbNMType = new javax.swing.JRadioButton();
        txtP = new javax.swing.JTextField();
        lblP = new javax.swing.JLabel();
        lblM = new javax.swing.JLabel();
        txtM = new javax.swing.JTextField();
        lblN = new javax.swing.JLabel();
        txtN = new javax.swing.JTextField();
        isDirected = new javax.swing.JCheckBox();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setPreferredSize(new java.awt.Dimension(360, 480));

        Title.setText("Randomizer options menu");

        ProgressLabel.setText("Progress");

        ExitButton.setText("Exit");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });

        chkRandomize.setText("Get parameters from current network");
        chkRandomize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkRandomizeActionPerformed(evt);
            }
        });

        StartButton.setText("Start");
        StartButton.setEnabled(false);
        StartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartButtonActionPerformed(evt);
            }
        });

        rbgERModelType.add(rbNpType);
        rbNpType.setText("G(n,p)");

        rbgERModelType.add(rbNMType);
        rbNMType.setText("G(n,M)");

        lblP.setText("p = ");

        lblM.setText("M = ");

        lblN.setText("n = ");

        isDirected.setText("is directed");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(ProgressBar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(StartButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(ExitButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(31, 31, 31)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, rbNMType)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, rbNpType))
                                .add(18, 18, 18)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(lblM)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                        .add(txtM, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(jPanel1Layout.createSequentialGroup()
                                            .add(lblN)
                                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                            .add(txtN, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                        .add(jPanel1Layout.createSequentialGroup()
                                            .add(lblP)
                                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                            .add(txtP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                            .add(chkRandomize)
                            .add(Title)
                            .add(ProgressLabel)
                            .add(isDirected))
                        .add(0, 163, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(Title)
                .add(62, 62, 62)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(txtN, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblN))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(txtP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(lblP))
                        .add(18, 18, 18)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(txtM, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(lblM)))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(rbNpType)
                        .add(18, 18, 18)
                        .add(rbNMType)))
                .add(18, 18, 18)
                .add(chkRandomize)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(isDirected)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(StartButton)
                .add(18, 18, 18)
                .add(ExitButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(17, 17, 17)
                .add(ProgressLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(ProgressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void chkRandomizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkRandomizeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkRandomizeActionPerformed

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        // TODO add your handling code here:
        System.out.println("Closing Randomizer");
        closeRandomizer();
    }//GEN-LAST:event_ExitButtonActionPerformed

    private void StartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartButtonActionPerformed
        // TODO add your handling code here:
        System.out.println("You pressed START");
        boolean direction = isDirected.isSelected();//is the network directed???????    
        System.out.println("direction "+direction);
        // using network randomization
        if(chkRandomize.isSelected()) {
            if (cyApplicationManager.getCurrentNetworkView() == null){
                JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),"No views available for your network (is the network missing?)", "Randomizer", JOptionPane.WARNING_MESSAGE);
            }
            else{
                if(cyApplicationManager.getCurrentNetworkView().getModel().getNodeList().isEmpty()){
                    JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),"The network contains zero nodes", "Randomizer", JOptionPane.WARNING_MESSAGE);
                }
                else{
                    AbstractModel randomizer = new MultiplicationModel(randomizerCore,direction);
                    thread = new ThreadEngine(randomizer);
                    thread.start();
                }
            }
        }

        // using random network generator
        else{
            AbstractModel randomizer;
            try {
                int n = Integer.parseInt(txtN.getText());
                if(n < 0) throw new Exception("Parameter n less than zero!");
                ErdosRenyiModel.ERType type;
                if(rbNMType.isSelected()){
                    type = ErdosRenyiModel.ERType.nM;
                    int M = Integer.parseInt(txtM.getText());
                    if(M < 0) throw new Exception("Parameter M less than zero!");
                    randomizer = new ErdosRenyiModel(n, M, 0, type, randomizerCore);
                }
                if(rbNpType.isSelected()){
                    type = ErdosRenyiModel.ERType.np;
                    float p = Float.parseFloat(txtP.getText());
                    if(p < 0 || p > 1) throw new Exception("Parameter p out of  the range [0,1]!");
                    randomizer = new ErdosRenyiModel(n, 0, p, type, randomizerCore);
                }
                else{
                    throw new Exception("No models selected. Choose one!");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),e.getMessage(), "Randomizer", JOptionPane.WARNING_MESSAGE);
                return;
            }
            thread = new ThreadEngine(randomizer);
            thread.start();
        }
    }//GEN-LAST:event_StartButtonActionPerformed
    //  }
    
    
//    private void StartButtonActionPerformed(java.awt.event.ActionEvent evt) {                                            
//        // TODO add your handling code here:
//        System.out.println("You pressed START");
//        if (cyApplicationManager.getCurrentNetworkView() == null){
//            JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),"No views available for your network (is the network missing?)", "Randomizer", JOptionPane.WARNING_MESSAGE);
//        }
//        else{
//            if(cyApplicationManager.getCurrentNetworkView().getModel().getNodeList().isEmpty()){
//                JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),"The network contains zero nodes", "Randomizer", JOptionPane.WARNING_MESSAGE);
//            }
//            else{
//                AbstractModel randomizer = new ErdosRenyiModel(randomizerCore);
//                thread = new ThreadEngine(randomizer);
//                thread.start();
//            }
//        }
//        
//    } 
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ExitButton;
    private javax.swing.JProgressBar ProgressBar;
    private javax.swing.JLabel ProgressLabel;
    private javax.swing.JToggleButton StartButton;
    private javax.swing.JLabel Title;
    private javax.swing.JCheckBox chkRandomize;
    private javax.swing.JCheckBox isDirected;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblM;
    private javax.swing.JLabel lblN;
    private javax.swing.JLabel lblP;
    private javax.swing.JRadioButton rbNMType;
    private javax.swing.JRadioButton rbNpType;
    private javax.swing.ButtonGroup rbgERModelType;
    private javax.swing.JTextField txtM;
    private javax.swing.JTextField txtN;
    private javax.swing.JTextField txtP;
    // End of variables declaration//GEN-END:variables

    public void endcalculus(int totalnodecount) {
        ProgressBar.setIndeterminate(false);
        ProgressLabel.setText("Finished: " + totalnodecount + " nodes worked");
    }

    public void stopcalculus() {
        ProgressBar.setIndeterminate(false);
        ProgressLabel.setText("Interrupted by user, click start to repeat");
        StartButton.setEnabled(true);
    }

    public void calculatingresult() {
        ProgressBar.setIndeterminate(true);
        ProgressBar.setVisible(true);
        ProgressLabel.setText("Calculating...");
        StartButton.setEnabled(false);
    }

    public void updatenodecounting(int nodeworked, int totalnodecount) {
        ProgressLabel.setText("Analysing node " + nodeworked + " of " + totalnodecount);
    }

    public void closeRandomizer() {
        randomizerCore.closeOptionsMenu();
    }
    
    public boolean iscurrentnetworkchanged() {
        return false;
    }
    
    @Override
    public Component getComponent() {
        return this;
    }
    
    public void startcomputation() {
        calculatingresult();
        //currentnetwork = cyApplicationManager.getCurrentNetwork();
    }
    @Override
    public CytoPanelName getCytoPanelName() {
        return CytoPanelName.WEST;
    }
    @Override
    public String getTitle() {
        return "Randomizer";
    }
    
    @Override
    public Icon getIcon() { 
        return null;
    }
}