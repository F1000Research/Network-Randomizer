/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package network.randomizer.internal;

import java.awt.Component;
import javax.swing.*;
import org.cytoscape.application.CyApplicationManager;
import org.cytoscape.application.swing.CySwingApplication;
import org.cytoscape.application.swing.CytoPanelComponent;
import org.cytoscape.application.swing.CytoPanelName;

/**
 *
 * @author gabriele
 */

//questa classe definisce il comportamento del menu di input ed Ã¨ come se fosse la classe Main. da qua faccio tutto!

public class OptionsMenu extends JPanel implements CytoPanelComponent {
    private final RandomizerCore randomizerCore;
    public CyApplicationManager cyApplicationManager;
    public CySwingApplication cyDesktopService;
    public CyActivator cyActivator;
    public ThreadEngine thread;
    
    public OptionsMenu(RandomizerCore core){
        initComponents();
        cyActivator = core.cyActivator;
        cyApplicationManager = core.cyApplicationManager;
        cyDesktopService = core.cyDesktopService;
        randomizerCore = core;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     * 
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        Title = new javax.swing.JLabel();
        ProgressBar = new javax.swing.JProgressBar();
        ProgressLabel = new javax.swing.JLabel();
        ExitButton = new javax.swing.JButton();
        randomizeCheck = new javax.swing.JCheckBox();
        StartButton = new javax.swing.JToggleButton();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setPreferredSize(new java.awt.Dimension(360, 480));

        Title.setText("Randomizer options menu");

        ProgressLabel.setText("Progress Label");

        ExitButton.setText("Exit");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });

        randomizeCheck.setText("randomize");
        randomizeCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomizeCheckActionPerformed(evt);
            }
        });

        StartButton.setText("Start");
        StartButton.setEnabled(false);
        StartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(ProgressBar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(ProgressLabel)
                                    .add(Title))
                                .add(0, 123, Short.MAX_VALUE))))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(45, 45, 45)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(randomizeCheck)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(StartButton)
                                .add(64, 64, 64)
                                .add(ExitButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(Title)
                .add(38, 38, 38)
                .add(randomizeCheck)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 101, Short.MAX_VALUE)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(ExitButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(StartButton))
                .add(121, 121, 121)
                .add(ProgressLabel)
                .add(18, 18, 18)
                .add(ProgressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(22, 22, 22)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(60, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        // TODO add your handling code here:
        System.out.println("Closing Randomizer");        
        closeRandomizer();
    }//GEN-LAST:event_ExitButtonActionPerformed

    private void randomizeCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomizeCheckActionPerformed
        // TODO add your handling code here:
        if(randomizeCheck.isSelected()){
            StartButton.setEnabled(true);            
        }
        else{
            StartButton.setEnabled(false);
        }
    }//GEN-LAST:event_randomizeCheckActionPerformed

    private void StartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartButtonActionPerformed
        // TODO add your handling code here:
        System.out.println("You pressed START");
        if (cyApplicationManager.getCurrentNetworkView() == null){
            JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),"No views available for your network (is the network missing?)", "Randomizer", JOptionPane.WARNING_MESSAGE);
        }
        else{
            if(cyApplicationManager.getCurrentNetworkView().getModel().getNodeList().isEmpty()){
                JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),"The network contains zero nodes", "Randomizer", JOptionPane.WARNING_MESSAGE);
            }
            else{
                SimulationAlgorithm simulation = new SimulationAlgorithm(randomizerCore);
                thread = new ThreadEngine(simulation);
                thread.start();
            }
        }
        
    }//GEN-LAST:event_StartButtonActionPerformed
    //  }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ExitButton;
    private javax.swing.JProgressBar ProgressBar;
    private javax.swing.JLabel ProgressLabel;
    private javax.swing.JToggleButton StartButton;
    private javax.swing.JLabel Title;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JCheckBox randomizeCheck;
    // End of variables declaration//GEN-END:variables

    public void endcalculus(int totalnodecount) {
        ProgressBar.setIndeterminate(false);
        ProgressLabel.setText("Finished: " + totalnodecount + " nodes worked");
    }

    public void stopcalculus() {
        ProgressBar.setIndeterminate(false);
        ProgressLabel.setText("Interrupted by user, click start to repeat");
        StartButton.setEnabled(true);
    }

    public void calculatingresult() {
        ProgressBar.setIndeterminate(true);
        ProgressBar.setVisible(true);
        ProgressLabel.setText("Calculating...");
        StartButton.setEnabled(false);
    }

    public void updatenodecounting(int nodeworked, int totalnodecount) {
        ProgressLabel.setText("Analysing node " + nodeworked + " of " + totalnodecount);
    }

    public void closeRandomizer() {
        randomizerCore.closeOptionsMenu();
    }
    
    public boolean iscurrentnetworkchanged() {
        return false;
    }
    
    @Override
    public Component getComponent() {
        return this;
    }
    
    public void startcomputation() {
        calculatingresult();
        //currentnetwork = cyApplicationManager.getCurrentNetwork();
    }
    @Override
    public CytoPanelName getCytoPanelName() {
        return CytoPanelName.WEST;
    }
    @Override
    public String getTitle() {
        return "Randomizer";
    }
    
    @Override
    public Icon getIcon() { 
        return null;
    }
}