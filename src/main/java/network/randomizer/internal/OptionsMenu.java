/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package network.randomizer.internal;

import java.awt.Component;
import javax.swing.*;
import org.cytoscape.application.CyApplicationManager;
import org.cytoscape.application.swing.CySwingApplication;
import org.cytoscape.application.swing.CytoPanelComponent;
import org.cytoscape.application.swing.CytoPanelName;

/**
 *
 * @author gabriele
 */

//questa classe definisce il comportamento del menu di input ed Ã¨ come se fosse la classe Main. da qua faccio tutto!

public class OptionsMenu extends JPanel implements CytoPanelComponent {
    private final RandomizerCore randomizerCore;
    public CyApplicationManager cyApplicationManager;
    public CySwingApplication cyDesktopService;
    public CyActivator cyActivator;
    public ThreadEngine thread;
    
    public OptionsMenu(RandomizerCore core){
        initComponents();
        cyActivator = core.cyActivator;
        cyApplicationManager = core.cyApplicationManager;
        cyDesktopService = core.cyDesktopService;
        randomizerCore = core;
        ERrbNpType.setSelected(true);
        ERrbNMType.setSelected(false);
        setERType();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     * 
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rbgERModelType = new javax.swing.ButtonGroup();
        MULPanel = new javax.swing.JPanel();
        MULchkRandomize = new javax.swing.JCheckBox();
        MULchkIsDirected = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        MULInfo = new javax.swing.JButton();
        MULRun = new javax.swing.JButton();
        ERPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        ERInfo = new javax.swing.JButton();
        ERtxtN = new javax.swing.JTextField();
        lblN = new javax.swing.JLabel();
        ERtxtP = new javax.swing.JTextField();
        lblP = new javax.swing.JLabel();
        ERtxtM = new javax.swing.JTextField();
        lblM = new javax.swing.JLabel();
        ERrbNpType = new javax.swing.JRadioButton();
        ERrbNMType = new javax.swing.JRadioButton();
        ERchkRandomize = new javax.swing.JCheckBox();
        ERRun = new javax.swing.JButton();
        Title = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        ProgressLabel = new javax.swing.JLabel();
        ProgressBar = new javax.swing.JProgressBar();
        ExitButton = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JSeparator();
        WSPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        WSInfo = new javax.swing.JButton();
        WStxtN = new javax.swing.JTextField();
        lblN1 = new javax.swing.JLabel();
        WStxtK = new javax.swing.JTextField();
        lblP1 = new javax.swing.JLabel();
        WStxtBeta = new javax.swing.JTextField();
        lblM1 = new javax.swing.JLabel();
        WSRun = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setPreferredSize(new java.awt.Dimension(360, 480));

        MULchkRandomize.setText("Get parameters from current network");

        MULchkIsDirected.setText("is directed");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Multiplication model");

        MULInfo.setText("?");

        MULRun.setText("Run");
        MULRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MULRunActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout MULPanelLayout = new org.jdesktop.layout.GroupLayout(MULPanel);
        MULPanel.setLayout(MULPanelLayout);
        MULPanelLayout.setHorizontalGroup(
            MULPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(MULPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(MULPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(MULPanelLayout.createSequentialGroup()
                        .add(jLabel3)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(MULInfo))
                    .add(MULPanelLayout.createSequentialGroup()
                        .add(MULPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(MULchkRandomize)
                            .add(MULchkIsDirected))
                        .add(0, 0, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, MULPanelLayout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(MULRun, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        MULPanelLayout.setVerticalGroup(
            MULPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(MULPanelLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(MULPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(MULInfo))
                .add(18, 18, 18)
                .add(MULchkRandomize)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(MULchkIsDirected)
                .add(18, 18, 18)
                .add(MULRun)
                .add(193, 193, 193))
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Erdõs–Rényi model");

        ERInfo.setText("?");

        lblN.setText("n = ");

        lblP.setText("p = ");

        lblM.setText("M = ");

        rbgERModelType.add(ERrbNpType);
        ERrbNpType.setText("G(n,p)");
        ERrbNpType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ERrbNpTypeActionPerformed(evt);
            }
        });

        rbgERModelType.add(ERrbNMType);
        ERrbNMType.setText("G(n,M)");
        ERrbNMType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ERrbNMTypeActionPerformed(evt);
            }
        });

        ERchkRandomize.setText("Randomize current network");
        ERchkRandomize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ERchkRandomizeActionPerformed(evt);
            }
        });

        ERRun.setText("Run");
        ERRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ERRunActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout ERPanelLayout = new org.jdesktop.layout.GroupLayout(ERPanel);
        ERPanel.setLayout(ERPanelLayout);
        ERPanelLayout.setHorizontalGroup(
            ERPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(ERPanelLayout.createSequentialGroup()
                .add(ERPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, ERPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(ERPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(ERchkRandomize)
                            .add(jLabel1))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 30, Short.MAX_VALUE)
                        .add(ERInfo))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, ERPanelLayout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(ERRun, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .add(ERPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(ERPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(ERrbNpType)
                    .add(ERrbNMType))
                .add(18, 18, 18)
                .add(ERPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(ERPanelLayout.createSequentialGroup()
                        .add(lblM)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(ERtxtM, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(ERPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(ERPanelLayout.createSequentialGroup()
                            .add(lblN)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(ERtxtN, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(ERPanelLayout.createSequentialGroup()
                            .add(lblP)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(ERtxtP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ERPanelLayout.setVerticalGroup(
            ERPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, ERPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(ERPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(ERInfo))
                .add(18, 18, 18)
                .add(ERchkRandomize)
                .add(18, 18, 18)
                .add(ERPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(ERtxtN, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblN))
                .add(18, 18, 18)
                .add(ERPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(ERPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(ERtxtP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(lblP))
                    .add(ERPanelLayout.createSequentialGroup()
                        .add(ERrbNpType)
                        .add(18, 18, 18)
                        .add(ERPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(ERrbNMType)
                            .add(ERtxtM, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(lblM))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 16, Short.MAX_VALUE)
                .add(ERRun)
                .addContainerGap())
        );

        Title.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Title.setText("Randomizer");

        ProgressLabel.setText("Progress");

        ExitButton.setText("Exit");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Watt-Strogatz model");

        WSInfo.setText("?");

        lblN1.setText("N = ");

        lblP1.setText("K = ");

        lblM1.setText("<html>&beta = ");

        WSRun.setText("Run");
        WSRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WSRunActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout WSPanelLayout = new org.jdesktop.layout.GroupLayout(WSPanel);
        WSPanel.setLayout(WSPanelLayout);
        WSPanelLayout.setHorizontalGroup(
            WSPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(WSPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(WSPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(WSPanelLayout.createSequentialGroup()
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 59, Short.MAX_VALUE)
                        .add(WSInfo))
                    .add(WSPanelLayout.createSequentialGroup()
                        .add(10, 10, 10)
                        .add(WSPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(WSPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(WSPanelLayout.createSequentialGroup()
                                    .add(lblN1)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(WStxtN, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .add(WSPanelLayout.createSequentialGroup()
                                    .add(lblP1)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(WStxtK, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(WSPanelLayout.createSequentialGroup()
                                .add(lblM1)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(WStxtBeta, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 70, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(0, 0, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, WSPanelLayout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(WSRun, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        WSPanelLayout.setVerticalGroup(
            WSPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(WSPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(WSPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(WSInfo))
                .add(35, 35, 35)
                .add(WSPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(WStxtN, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(lblN1))
                .add(18, 18, 18)
                .add(WSPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(WSPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(WStxtK, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(lblP1))
                    .add(WSPanelLayout.createSequentialGroup()
                        .add(43, 43, 43)
                        .add(WSPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(WStxtBeta, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(lblM1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(WSRun)
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jSeparator1)
            .add(jSeparator2)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(ProgressBar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(Title)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(ProgressLabel)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(ExitButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .add(jSeparator3)
            .add(jSeparator4)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(MULPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(ERPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(WSPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .add(12, 12, 12))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(Title)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(WSPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(ERPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(MULPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 171, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(42, 42, 42)
                .add(jSeparator4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, ExitButton)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, ProgressLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(ProgressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        System.out.println("Closing Randomizer");
        closeRandomizer();
    }//GEN-LAST:event_ExitButtonActionPerformed

    private void MULRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MULRunActionPerformed
        System.out.println("You pressed Multiplication model Run");
        boolean direction = MULchkIsDirected.isSelected();//is the network directed???????
        System.out.println("direction "+direction);
        // using network randomization
        if(MULchkRandomize.isSelected()) {
            if (cyApplicationManager.getCurrentNetworkView() == null){
                JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),"No views available for your network (is the network missing?)", "Randomizer", JOptionPane.WARNING_MESSAGE);
            }
            else{
                if(cyApplicationManager.getCurrentNetworkView().getModel().getNodeList().isEmpty()){
                    JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),"The network contains zero nodes", "Randomizer", JOptionPane.WARNING_MESSAGE);
                }
                else{
                    AbstractModel randomizer = new MultiplicationModel(randomizerCore,direction);
                    thread = new ThreadEngine(randomizer);
                    thread.start();
                }
            }
        }

        // using random network generator
        else{
            AbstractModel randomizer;
            try {
                int n = Integer.parseInt(ERtxtN.getText());
                if(n < 0) throw new Exception("Parameter n less than zero!");
                ErdosRenyiModel.ERType type;
                if(ERrbNMType.isSelected()){
                    type = ErdosRenyiModel.ERType.nM;
                    int M = Integer.parseInt(ERtxtM.getText());
                    if(M < 0) throw new Exception("Parameter M less than zero!");
                    randomizer = new ErdosRenyiModel(n, M, 0, type, randomizerCore);
                }
                else if(ERrbNpType.isSelected()){
                    type = ErdosRenyiModel.ERType.np;
                    float p = Float.parseFloat(ERtxtP.getText());
                    if(p < 0 || p > 1) throw new Exception("Parameter p out of  the range [0,1]!");
                    randomizer = new ErdosRenyiModel(n, 0, p, type, randomizerCore);
                }
                else{
                    throw new Exception("No models selected. Choose one!");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),e.getMessage(), "Randomizer", JOptionPane.WARNING_MESSAGE);
                return;
            }
            thread = new ThreadEngine(randomizer);
            thread.start();
        }
    }//GEN-LAST:event_MULRunActionPerformed

    private void ERRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ERRunActionPerformed
        System.out.println("You pressed Erdos-Renyi model Run");

        AbstractModel randomizer;

        // randomize current network
        if(ERchkRandomize.isSelected()){
            randomizer = new ErdosRenyiModel(randomizerCore);
        }

        // generate random network
        else{
            try {
                int n = Integer.parseInt(ERtxtN.getText());
                if(n < 0) throw new Exception("Parameter n less than zero!");
                ErdosRenyiModel.ERType type;
                // G(N,M) model is selected
                if(ERrbNMType.isSelected()){
                    type = ErdosRenyiModel.ERType.nM;
                    int M = Integer.parseInt(ERtxtM.getText());
                    if(M < 0) throw new Exception("Parameter M less than zero!");
                    if(M > n*(n-1)/2) throw new Exception("Parameter M larger than possible number of edges (n(n-1)/2)!");
                    randomizer = new ErdosRenyiModel(n, M, 0, type, randomizerCore);
                }
                // G(N,p) model is selected
                else if(ERrbNpType.isSelected()){
                    type = ErdosRenyiModel.ERType.np;
                    float p = Float.parseFloat(ERtxtP.getText());
                    if(p < 0 || p > 1) throw new Exception("Parameter p out of  the range [0,1]!");
                    randomizer = new ErdosRenyiModel(n, 0, p, type, randomizerCore);
                }
                else{
                    throw new Exception("No models selected. Choose one!");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),e.getMessage(), "Randomizer", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }
        thread = new ThreadEngine(randomizer);
        thread.start();
    }//GEN-LAST:event_ERRunActionPerformed

    private void ERchkRandomizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ERchkRandomizeActionPerformed
        boolean enabled = true;
        if(ERchkRandomize.isSelected()) enabled = false;
        ERtxtN.setEnabled(enabled);
        ERrbNMType.setEnabled(enabled);
        ERrbNpType.setEnabled(enabled);
        ERtxtM.setEnabled(enabled);
        ERtxtP.setEnabled(enabled);
        if(enabled) setERType();
    }//GEN-LAST:event_ERchkRandomizeActionPerformed

    private void ERrbNpTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ERrbNpTypeActionPerformed
        setERType();
    }//GEN-LAST:event_ERrbNpTypeActionPerformed

    private void ERrbNMTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ERrbNMTypeActionPerformed
        setERType();
    }//GEN-LAST:event_ERrbNMTypeActionPerformed

    private void WSRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WSRunActionPerformed
        System.out.println("You pressed Watts-Strogatz model Run");

        AbstractModel randomizer;
        // generate random network
        try {
            int N = Integer.parseInt(WStxtN.getText());
            if(N < 0) throw new Exception("Parameter N less than zero!");
            int K = Integer.parseInt(WStxtK.getText());
            if(K < 0) throw new Exception("Parameter K less than zero!");
            if(K > N/2) throw new Exception("Parameter K must be less than N/2!");
            float beta = Float.parseFloat(WStxtBeta.getText());
            if(beta < 0 || beta > 1) throw new Exception("Parameter beta must be in [0,1]!");
            randomizer = new WattsStrogatzModel(randomizerCore, N, K, beta);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),e.getMessage(), "Randomizer", JOptionPane.WARNING_MESSAGE);
            return;
        }
        thread = new ThreadEngine(randomizer);
        thread.start();
    }//GEN-LAST:event_WSRunActionPerformed
    
    private void setERType(){
        if(ERrbNMType.isSelected()){
            ERtxtM.setEnabled(true);
            ERtxtP.setEnabled(false);
        }
        else{
            ERtxtM.setEnabled(false);
            ERtxtP.setEnabled(true);
        }
    }

    private void showInfo(String title, String info){
        JOptionPane.showMessageDialog(this, info, title, JOptionPane.INFORMATION_MESSAGE);
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ERInfo;
    private javax.swing.JPanel ERPanel;
    private javax.swing.JButton ERRun;
    private javax.swing.JCheckBox ERchkRandomize;
    private javax.swing.JRadioButton ERrbNMType;
    private javax.swing.JRadioButton ERrbNpType;
    private javax.swing.JTextField ERtxtM;
    private javax.swing.JTextField ERtxtN;
    private javax.swing.JTextField ERtxtP;
    private javax.swing.JButton ExitButton;
    private javax.swing.JButton MULInfo;
    private javax.swing.JPanel MULPanel;
    private javax.swing.JButton MULRun;
    private javax.swing.JCheckBox MULchkIsDirected;
    private javax.swing.JCheckBox MULchkRandomize;
    private javax.swing.JProgressBar ProgressBar;
    private javax.swing.JLabel ProgressLabel;
    private javax.swing.JLabel Title;
    private javax.swing.JButton WSInfo;
    private javax.swing.JPanel WSPanel;
    private javax.swing.JButton WSRun;
    private javax.swing.JTextField WStxtBeta;
    private javax.swing.JTextField WStxtK;
    private javax.swing.JTextField WStxtN;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JLabel lblM;
    private javax.swing.JLabel lblM1;
    private javax.swing.JLabel lblN;
    private javax.swing.JLabel lblN1;
    private javax.swing.JLabel lblP;
    private javax.swing.JLabel lblP1;
    private javax.swing.ButtonGroup rbgERModelType;
    // End of variables declaration//GEN-END:variables

    public void endcalculus(int totalnodecount) {
        ProgressBar.setIndeterminate(false);
        ProgressLabel.setText("Finished: " + totalnodecount + " nodes worked");
    }

    public void stopcalculus() {
        ProgressBar.setIndeterminate(false);
        ProgressLabel.setText("Interrupted by user, click start to repeat");
        MULRun.setEnabled(true);
    }

    public void calculatingresult() {
        ProgressBar.setIndeterminate(true);
        ProgressBar.setVisible(true);
        ProgressLabel.setText("Calculating...");
        MULRun.setEnabled(false);
    }

    public void updatenodecounting(int nodeworked, int totalnodecount) {
        ProgressLabel.setText("Analysing node " + nodeworked + " of " + totalnodecount);
    }

    public void closeRandomizer() {
        randomizerCore.closeOptionsMenu();
    }
    
    public boolean iscurrentnetworkchanged() {
        return false;
    }
    
    @Override
    public Component getComponent() {
        return this;
    }
    
    public void startcomputation() {
        calculatingresult();
        //currentnetwork = cyApplicationManager.getCurrentNetwork();
    }
    @Override
    public CytoPanelName getCytoPanelName() {
        return CytoPanelName.WEST;
    }
    @Override
    public String getTitle() {
        return "Randomizer";
    }
    
    @Override
    public Icon getIcon() { 
        return null;
    }
}