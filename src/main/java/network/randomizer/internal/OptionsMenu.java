/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package network.randomizer.internal;

import java.awt.Component;
import java.io.File;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import org.cytoscape.application.CyApplicationManager;
import org.cytoscape.application.swing.CySwingApplication;
import org.cytoscape.application.swing.CytoPanelComponent;
import org.cytoscape.application.swing.CytoPanelName;
import org.cytoscape.model.CyNetwork;

/**
 *
 * @author gabriele
 */
public class OptionsMenu extends javax.swing.JPanel implements CytoPanelComponent {
    
    private RandomizerCore randomizerCore;
    public CyApplicationManager cyApplicationManager;
    public CySwingApplication cyDesktopService;
    public CyActivator cyActivator;
    public ThreadEngine thread;
    public List<String> centralitiesNames;
    private List<CyNetwork> realnet = new ArrayList();
    private List<CyNetwork> randomnet = new ArrayList();
    private List<String> tmp, centrfinal;
    StatisticalFunctions stat; 



    /**
     * Creates new form OptionsMenuNew
     */
    public OptionsMenu(RandomizerCore core) {
        initComponents();
        cyActivator = core.cyActivator;
        cyApplicationManager = core.cyApplicationManager;
        cyDesktopService = core.cyDesktopService;
        randomizerCore = core;
        realButton.setEnabled(false);
        randomButton.setEnabled(false);
        AttributeList.setEnabled(false);
        //ListLabel.setEnabled(false);
        MultiplyFileName.setEnabled(false);
        MultiplyFileButton.setEnabled(false);
        //MultiLabel.setEnabled(false);
        multiIsDirected.setEnabled(false);
        MultiHowMany.setEnabled(false);
        MultiManyLabel.setEnabled(false);
        MultiInput.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ERGroup = new javax.swing.ButtonGroup();
        CAfileChooser = new javax.swing.JFileChooser();
        MultiplyFileChooser = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        StartButton = new javax.swing.JButton();
        ExitButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        ERPanel = new javax.swing.JPanel();
        ERtxtN = new javax.swing.JTextField();
        lblN = new javax.swing.JLabel();
        ERtxtP = new javax.swing.JTextField();
        lblP = new javax.swing.JLabel();
        ERtxtM = new javax.swing.JTextField();
        lblM = new javax.swing.JLabel();
        ERrbNpType = new javax.swing.JRadioButton();
        ERrbNMType = new javax.swing.JRadioButton();
        ERCheck = new javax.swing.JCheckBox();
        ERhelp = new javax.swing.JButton();
        ERN = new javax.swing.JLabel();
        ERP = new javax.swing.JLabel();
        ERM = new javax.swing.JLabel();
        WSPanel = new javax.swing.JPanel();
        WStxtN = new javax.swing.JTextField();
        lblN1 = new javax.swing.JLabel();
        WStxtK = new javax.swing.JTextField();
        lblP1 = new javax.swing.JLabel();
        WStxtBeta = new javax.swing.JTextField();
        lblM1 = new javax.swing.JLabel();
        WSCheck = new javax.swing.JCheckBox();
        WShelp = new javax.swing.JButton();
        WSN = new javax.swing.JLabel();
        WSK = new javax.swing.JLabel();
        WSB = new javax.swing.JLabel();
        multiPanel = new javax.swing.JPanel();
        multiIsDirected = new javax.swing.JCheckBox();
        multiCheck = new javax.swing.JCheckBox();
        MULTIhelp = new javax.swing.JButton();
        MultiplyFileButton = new javax.swing.JButton();
        MultiplyFileName = new javax.swing.JTextField();
        MultiLabel = new javax.swing.JLabel();
        MultiHowMany = new javax.swing.JCheckBox();
        MultiInput = new javax.swing.JTextField();
        MultiManyLabel = new javax.swing.JLabel();
        WSPanel1 = new javax.swing.JPanel();
        BAtxtN = new javax.swing.JTextField();
        lblN2 = new javax.swing.JLabel();
        BAtxtM = new javax.swing.JTextField();
        lblP2 = new javax.swing.JLabel();
        BACheck = new javax.swing.JCheckBox();
        BAHelp = new javax.swing.JButton();
        lblP3 = new javax.swing.JLabel();
        BAN = new javax.swing.JLabel();
        BAM = new javax.swing.JLabel();
        WSPanel2 = new javax.swing.JPanel();
        LATtxtDimSizes = new javax.swing.JTextField();
        LATCheck = new javax.swing.JCheckBox();
        LATHelp = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        LATisTorus = new javax.swing.JCheckBox();
        LAD = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        RandomizeCurrent = new javax.swing.JCheckBox();
        RNDHelp = new javax.swing.JButton();
        DEGHelp = new javax.swing.JButton();
        DegreePreserving = new javax.swing.JCheckBox();
        multiPanel3 = new javax.swing.JPanel();
        CAcheck = new javax.swing.JCheckBox();
        CAHelp = new javax.swing.JButton();
        CAtxtFile = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        CAbtnFile = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        realButton = new javax.swing.JButton();
        randomButton = new javax.swing.JButton();
        StatCheck = new javax.swing.JCheckBox();
        StatHelp = new javax.swing.JButton();
        ListLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        AttributeList = new javax.swing.JList<>();
        realLabel = new javax.swing.JLabel();
        randomLabel = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(630, 1180));

        jScrollPane1.setPreferredSize(new java.awt.Dimension(580, 1180));
        jScrollPane1.setRequestFocusEnabled(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setPreferredSize(new java.awt.Dimension(630, 1180));
        jPanel1.setRequestFocusEnabled(false);

        StartButton.setText("START");
        StartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartButtonActionPerformed(evt);
            }
        });

        ExitButton.setText("EXIT");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel1.setText("Networks Randomizer");

        ERPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        ERtxtN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ERtxtNActionPerformed(evt);
            }
        });

        lblN.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblN.setText("n = ");

        lblP.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblP.setText("p = ");

        lblM.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblM.setText("M = ");

        ERGroup.add(ERrbNpType);
        ERrbNpType.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        ERrbNpType.setText("G(n,p)");
        ERrbNpType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ERrbNpTypeActionPerformed(evt);
            }
        });

        ERGroup.add(ERrbNMType);
        ERrbNMType.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        ERrbNMType.setText("G(n,M)");
        ERrbNMType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ERrbNMTypeActionPerformed(evt);
            }
        });

        ERCheck.setText("Erdosâ€“Renyi model");
        ERCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ERCheckActionPerformed(evt);
            }
        });

        ERhelp.setText("?");
        ERhelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ERhelpActionPerformed(evt);
            }
        });

        ERN.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        ERN.setForeground(new java.awt.Color(255, 0, 0));

        ERP.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        ERP.setForeground(new java.awt.Color(255, 0, 0));

        ERM.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        ERM.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout ERPanelLayout = new javax.swing.GroupLayout(ERPanel);
        ERPanel.setLayout(ERPanelLayout);
        ERPanelLayout.setHorizontalGroup(
            ERPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ERPanelLayout.createSequentialGroup()
                .addGroup(ERPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ERPanelLayout.createSequentialGroup()
                        .addComponent(ERCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ERhelp))
                    .addGroup(ERPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(ERPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ERrbNpType)
                            .addComponent(ERrbNMType))
                        .addGap(18, 18, 18)
                        .addGroup(ERPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblM)
                            .addComponent(lblP)
                            .addComponent(lblN))
                        .addGap(21, 21, 21)
                        .addGroup(ERPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ERPanelLayout.createSequentialGroup()
                                .addComponent(ERtxtN, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ERN))
                            .addGroup(ERPanelLayout.createSequentialGroup()
                                .addGap(75, 75, 75)
                                .addComponent(ERP))
                            .addGroup(ERPanelLayout.createSequentialGroup()
                                .addComponent(ERtxtP, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ERM))
                            .addComponent(ERtxtM, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        ERPanelLayout.setVerticalGroup(
            ERPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ERPanelLayout.createSequentialGroup()
                .addGroup(ERPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ERCheck)
                    .addComponent(ERhelp, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ERPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ERtxtN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblN)
                    .addComponent(ERN)
                    .addComponent(ERrbNpType))
                .addGroup(ERPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ERPanelLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(ERPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ERPanelLayout.createSequentialGroup()
                                .addComponent(ERP)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ERM))
                            .addGroup(ERPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblP)
                                .addComponent(ERtxtP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(ERPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(ERrbNMType)
                        .addGap(4, 4, 4)
                        .addGroup(ERPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblM)
                            .addComponent(ERtxtM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        WSPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        WSPanel.setFocusCycleRoot(true);

        WStxtN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WStxtNActionPerformed(evt);
            }
        });

        lblN1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblN1.setText("N = ");

        lblP1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblP1.setText("K = ");

        lblM1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblM1.setText("<html>&beta = </html>");

        WSCheck.setText("Watt-Strogatz model");
        WSCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WSCheckActionPerformed(evt);
            }
        });

        WShelp.setText("?");
        WShelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WShelpActionPerformed(evt);
            }
        });

        WSN.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        WSN.setForeground(new java.awt.Color(255, 0, 0));

        WSK.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        WSK.setForeground(new java.awt.Color(255, 0, 0));

        WSB.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        WSB.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout WSPanelLayout = new javax.swing.GroupLayout(WSPanel);
        WSPanel.setLayout(WSPanelLayout);
        WSPanelLayout.setHorizontalGroup(
            WSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WSPanelLayout.createSequentialGroup()
                .addGroup(WSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, WSPanelLayout.createSequentialGroup()
                        .addComponent(WSCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(WShelp))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, WSPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(WSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblM1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblP1)
                            .addComponent(lblN1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(WSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(WSPanelLayout.createSequentialGroup()
                                .addComponent(WStxtN, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(WSN))
                            .addGroup(WSPanelLayout.createSequentialGroup()
                                .addComponent(WStxtK, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(WSK))
                            .addGroup(WSPanelLayout.createSequentialGroup()
                                .addComponent(WStxtBeta, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(WSB)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        WSPanelLayout.setVerticalGroup(
            WSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WSPanelLayout.createSequentialGroup()
                .addGroup(WSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WSCheck)
                    .addComponent(WShelp, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(WSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WStxtN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblN1)
                    .addComponent(WSN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblP1)
                    .addComponent(WStxtK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(WSK))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblM1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(WStxtBeta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(WSB))
                .addContainerGap())
        );

        multiPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        multiIsDirected.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        multiIsDirected.setText("the network is directed");
        multiIsDirected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiIsDirectedActionPerformed(evt);
            }
        });

        multiCheck.setText("Multiplication model");
        multiCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiCheckActionPerformed(evt);
            }
        });

        MULTIhelp.setText("?");
        MULTIhelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MULTIhelpActionPerformed(evt);
            }
        });

        MultiplyFileButton.setText("Select file");
        MultiplyFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MultiplyFileButtonActionPerformed(evt);
            }
        });

        MultiLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        MultiLabel.setText("Multiply current network, using:");

        MultiHowMany.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        MultiHowMany.setText("generate");

        MultiInput.setText("");

        MultiManyLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        MultiManyLabel.setText("networks");

        javax.swing.GroupLayout multiPanelLayout = new javax.swing.GroupLayout(multiPanel);
        multiPanel.setLayout(multiPanelLayout);
        multiPanelLayout.setHorizontalGroup(
            multiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(multiPanelLayout.createSequentialGroup()
                .addComponent(multiCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MULTIhelp)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(multiPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(multiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(multiIsDirected)
                    .addGroup(multiPanelLayout.createSequentialGroup()
                        .addComponent(MultiplyFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MultiplyFileButton))
                    .addGroup(multiPanelLayout.createSequentialGroup()
                        .addComponent(MultiHowMany)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MultiInput, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MultiManyLabel))
                    .addComponent(MultiLabel))
                .addContainerGap(103, Short.MAX_VALUE))
        );
        multiPanelLayout.setVerticalGroup(
            multiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(multiPanelLayout.createSequentialGroup()
                .addGroup(multiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(multiCheck)
                    .addComponent(MULTIhelp, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MultiLabel)
                .addGap(1, 1, 1)
                .addGroup(multiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MultiplyFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MultiplyFileButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(multiIsDirected)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(multiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MultiHowMany)
                    .addComponent(MultiInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MultiManyLabel))
                .addGap(197, 197, 197))
        );

        WSPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        BAtxtN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BAtxtNActionPerformed(evt);
            }
        });

        lblN2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblN2.setText("N = ");

        lblP2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblP2.setText("m = ");

        BACheck.setText("Barabasi-Albert model");
        BACheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BACheckActionPerformed(evt);
            }
        });

        BAHelp.setText("?");
        BAHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BAHelpActionPerformed(evt);
            }
        });

        lblP3.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblP3.setText("<< N");

        BAN.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        BAN.setForeground(new java.awt.Color(255, 0, 0));

        BAM.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        BAM.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout WSPanel1Layout = new javax.swing.GroupLayout(WSPanel1);
        WSPanel1.setLayout(WSPanel1Layout);
        WSPanel1Layout.setHorizontalGroup(
            WSPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WSPanel1Layout.createSequentialGroup()
                .addGroup(WSPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(WSPanel1Layout.createSequentialGroup()
                        .addComponent(BACheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BAHelp))
                    .addGroup(WSPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(WSPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblN2)
                            .addComponent(lblP2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(WSPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BAtxtM, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BAtxtN, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblP3)
                        .addGap(36, 36, 36)
                        .addGroup(WSPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BAM)
                            .addComponent(BAN))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        WSPanel1Layout.setVerticalGroup(
            WSPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WSPanel1Layout.createSequentialGroup()
                .addGroup(WSPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BACheck)
                    .addComponent(BAHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(WSPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BAtxtN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblN2)
                    .addComponent(BAN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WSPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblP2)
                    .addComponent(BAtxtM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblP3)
                    .addComponent(BAM))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        WSPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        LATCheck.setText("Lattice model");
        LATCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LATCheckActionPerformed(evt);
            }
        });

        LATHelp.setText("?");
        LATHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LATHelpActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel2.setText("Insert the Dimension sizes separated by comma, e.g. 2,3,1, ... ,n");

        LATisTorus.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        LATisTorus.setText("Generate hyper torus");

        LAD.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        LAD.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout WSPanel2Layout = new javax.swing.GroupLayout(WSPanel2);
        WSPanel2.setLayout(WSPanel2Layout);
        WSPanel2Layout.setHorizontalGroup(
            WSPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WSPanel2Layout.createSequentialGroup()
                .addGroup(WSPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(WSPanel2Layout.createSequentialGroup()
                        .addComponent(LATCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LATHelp))
                    .addGroup(WSPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(LATtxtDimSizes, javax.swing.GroupLayout.PREFERRED_SIZE, 404, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LAD)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(WSPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(WSPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LATisTorus)
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        WSPanel2Layout.setVerticalGroup(
            WSPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WSPanel2Layout.createSequentialGroup()
                .addGroup(WSPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LATCheck)
                    .addComponent(LATHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WSPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LATtxtDimSizes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LAD))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(LATisTorus)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        RandomizeCurrent.setText("Randomize current network");
        RandomizeCurrent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RandomizeCurrentActionPerformed(evt);
            }
        });

        RNDHelp.setText("?");
        RNDHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RNDHelpActionPerformed(evt);
            }
        });

        DEGHelp.setText("?");
        DEGHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DEGHelpActionPerformed(evt);
            }
        });

        DegreePreserving.setText("Randomize current network, preserving the Degree");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(RandomizeCurrent)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(RNDHelp))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(DegreePreserving)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(DEGHelp)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RandomizeCurrent)
                    .addComponent(RNDHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DEGHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DegreePreserving))
                .addContainerGap(57, Short.MAX_VALUE))
        );

        multiPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        CAcheck.setText("Community Affiliation model");
        CAcheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CAcheckActionPerformed(evt);
            }
        });

        CAHelp.setText("?");
        CAHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CAHelpActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel3.setText("Community data file:");

        CAbtnFile.setText("Select file");
        CAbtnFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CAbtnFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout multiPanel3Layout = new javax.swing.GroupLayout(multiPanel3);
        multiPanel3.setLayout(multiPanel3Layout);
        multiPanel3Layout.setHorizontalGroup(
            multiPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(multiPanel3Layout.createSequentialGroup()
                .addComponent(CAcheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CAHelp)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, multiPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(multiPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(multiPanel3Layout.createSequentialGroup()
                        .addComponent(CAtxtFile, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CAbtnFile)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        multiPanel3Layout.setVerticalGroup(
            multiPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(multiPanel3Layout.createSequentialGroup()
                .addGroup(multiPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CAcheck)
                    .addComponent(CAHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(multiPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CAtxtFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CAbtnFile))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jPanel3.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel5.setText("Real data networks");

        jLabel6.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel6.setText("Random networks");

        realButton.setText("Selected");
        realButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                realButtonActionPerformed(evt);
            }
        });

        randomButton.setText("Selected");
        randomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomButtonActionPerformed(evt);
            }
        });

        StatCheck.setText("Statistics");
        StatCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StatCheckActionPerformed(evt);
            }
        });

        StatHelp.setText("?");
        StatHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StatHelpActionPerformed(evt);
            }
        });

        ListLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        ListLabel.setText("Select the attribute(s) to compare:");

        AttributeList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Select networks before" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(AttributeList);

        realLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        realLabel.setForeground(new java.awt.Color(255, 0, 0));

        randomLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        randomLabel.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(StatCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(StatHelp)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(ListLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(randomButton)
                            .addComponent(realButton))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                    .addComponent(randomLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(realLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(36, 36, 36))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(StatCheck)
                    .addComponent(StatHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(realLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(realButton)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(randomButton)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(randomLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ListLabel)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ERPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(WSPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(WSPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(WSPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(multiPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(StartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ExitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(multiPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ERPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(WSPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(WSPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(WSPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(multiPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(multiPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ExitButton, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                    .addComponent(StartButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1178, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        // TODO add your handling code here:
        System.out.println("closing randomizer");
        closeRandomizer();
    }//GEN-LAST:event_ExitButtonActionPerformed

    private void ERrbNpTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ERrbNpTypeActionPerformed
        setERType();
    }//GEN-LAST:event_ERrbNpTypeActionPerformed

    private void ERrbNMTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ERrbNMTypeActionPerformed
        setERType();
    }//GEN-LAST:event_ERrbNMTypeActionPerformed

    private void RandomizeCurrentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RandomizeCurrentActionPerformed
        
    }//GEN-LAST:event_RandomizeCurrentActionPerformed

    private void StartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartButtonActionPerformed
        
        if(ERCheck.isSelected()){
            System.out.println("You started an Erdos-Renyi model");
            AbstractModel randomizer;
            
            // generate random network
            try {
                int n = Integer.parseInt(ERtxtN.getText());
                if(n < 0) throw new Exception("Parameter n less than zero!");
                ErdosRenyiModel.ERType type;
                // G(N,M) model is selected
                if(ERrbNMType.isSelected()){
                    type = ErdosRenyiModel.ERType.nM;
                    int M = Integer.parseInt(ERtxtM.getText());
                    if(M < 0) throw new Exception("Parameter M less than zero!");
                    if(M > n*(n-1)/2) throw new Exception("Parameter M larger than possible number of edges!\nFor n = " + n + ", maximum M = " + (n*(n-1)/2) + ".");
                    randomizer = new ErdosRenyiModel(n, M, 0, type, randomizerCore);
                }
                // G(N,p) model is selected
                else if(ERrbNpType.isSelected()){
                    type = ErdosRenyiModel.ERType.np;
                    float p = Float.parseFloat(ERtxtP.getText());
                    if(p < 0 || p > 1) throw new Exception("Parameter p out of  the range [0,1]!");
                    randomizer = new ErdosRenyiModel(n, 0, p, type, randomizerCore);
                }
                else{
                    throw new Exception("Type of Erdos-Renyi model isn't selected. Choose one!");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),e.getMessage(), "Randomizer", JOptionPane.WARNING_MESSAGE);
                return;
            }
            thread = new ThreadEngine(randomizer);
            thread.start();            
        }
        
        if(WSCheck.isSelected()){
            System.out.println("You started a Watts-Strogatz model");
            AbstractModel randomizer;
            // generate random network
            try {
                int N = Integer.parseInt(WStxtN.getText());
                if(N < 0) throw new Exception("Parameter N less than zero!");
                int K = Integer.parseInt(WStxtK.getText());
                if(K < 0) throw new Exception("Parameter K less than zero!");
                if(K > N/2) throw new Exception("Parameter K must be less than N/2!");
                float beta = Float.parseFloat(WStxtBeta.getText());
                if(beta < 0 || beta > 1) throw new Exception("Parameter beta must be in [0,1]!");
                randomizer = new WattsStrogatzModel(randomizerCore, N, K, beta);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),e.getMessage(), "Randomizer", JOptionPane.WARNING_MESSAGE);
                return;
            }
            thread = new ThreadEngine(randomizer);
            thread.start();
        }
        
        if(BACheck.isSelected()){
            System.out.println("You started a Barabasi-Albert model");
            AbstractModel randomizer;
            // generate random network
            try {
                int N = Integer.parseInt(BAtxtN.getText());
                if(N < 0) throw new Exception("Parameter N less than zero!");
                int m = Integer.parseInt(BAtxtM.getText());
                if(m < 0) throw new Exception("Parameter m less than zero!");
                if(m > N/2) throw new Exception("Parameter m too large!");
                randomizer = new BarabasiAlbertModel(randomizerCore, N, m);
            } catch (Exception e) {
                String message = e.getMessage();
                if(message.equals("")){
                    message = "Some arguments missing or of wrong format!";
                }
                JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(), message, "Randomizer", JOptionPane.WARNING_MESSAGE);
                return;
            }
            thread = new ThreadEngine(randomizer);
            thread.start();
        }
        
        if(LATCheck.isSelected()){
            System.out.println("You started a Random Lattice model");
            AbstractModel randomizer;
            // generate random network
            try {
                String[] stringDims = LATtxtDimSizes.getText().split(",");
                List<Integer> dims = new LinkedList<>();
                for(int i = 0; i < stringDims.length ; i++)
                    dims.add(Integer.parseInt(stringDims[i]));
                for (Integer dim : dims) {
                    if(dim < 1){
                        throw new Exception("All dimensions must be greater then 1.");
                    }
                }
                randomizer = new LatticeModel(randomizerCore, dims, LATisTorus.isSelected());
            } catch(NumberFormatException e){
                String message = "Wrong random lattice dimension sizes input format!\nPlease use comma seperated integer values only.";
                JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(), message, "Randomizer", JOptionPane.WARNING_MESSAGE);
                return;
            } catch (Exception e) {
                String message = e.getMessage();
                if(message.equals("")){
                    message = "Wrong random lattice dimension sizes input format!\nPlease use comma seperated integer values only.";
                }
                JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(), message, "Randomizer", JOptionPane.WARNING_MESSAGE);
                return;
            }
            thread = new ThreadEngine(randomizer);
            thread.start();
        }
        
        if(multiCheck.isSelected()){
            System.out.println("You started a Multiplication model");
            AbstractModel randomizer;            
            boolean direction = multiIsDirected.isSelected();//is the network directed???????
            System.out.println("direction "+direction);
            // using network randomization
            if (cyApplicationManager.getCurrentNetworkView() == null){
                JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),"No views available for your network (is the network missing?)", "Randomizer", JOptionPane.WARNING_MESSAGE);
            }
            else{
                if(cyApplicationManager.getCurrentNetworkView().getModel().getNodeList().isEmpty()){
                    JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),"The network contains zero nodes", "Randomizer", JOptionPane.WARNING_MESSAGE);
                }
                else{
                    if(MultiHowMany.isSelected()){//multiple networks generation
                        String path = MultiplyFileName.getText();
                        int howmanynets = Integer.parseInt(MultiInput.getText());
                        try {
                            File f = new File(path);
                            if(!f.exists() || f.isDirectory()) {
                                throw new Exception("File not found!");
                            }
                            //construct the threadengine once, and then, in a loop, call the threadEngine.start() multiple times
                            randomizer = new MultiplicationModel(randomizerCore,direction,path);                            
                            thread = new ThreadEngine(randomizer);
                            for(int i=0; i<howmanynets;i++){//this does not work properly
                                thread.start();
                            }
                        }
                        catch (Exception e) {
                            JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),e.getMessage(), "Randomizer", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                    }
                    else{//a single network is generated
                        String path = MultiplyFileName.getText();
                        try {
                            File f = new File(path);
                            if(!f.exists() || f.isDirectory()) { 
                                throw new Exception("File not found menu!");
                            }
                            randomizer = new MultiplicationModel(randomizerCore,direction,path);
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),e.getMessage(), "Randomizer", JOptionPane.WARNING_MESSAGE);
                            return;
                        }                        
                        thread = new ThreadEngine(randomizer);
                        thread.start();
                    }
                }
            }
        }
        
        if(CAcheck.isSelected()){
            System.out.println("You started a Community Affiliation model");
            AbstractModel randomizer;
            String filePath = CAtxtFile.getText();
            // generate random network
            try {
                File f = new File(filePath);
                if(!f.exists() || f.isDirectory()) { 
                    throw new Exception("File not found!");
                }
                randomizer = new CommunityAffiliationModel(randomizerCore, filePath);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),e.getMessage(), "Randomizer", JOptionPane.WARNING_MESSAGE);
                return;
            }
            thread = new ThreadEngine(randomizer);
            thread.start();
        }
        
        if(RandomizeCurrent.isSelected()){
            System.out.println("You started a randomization model");
            AbstractModel randomizer = new ErdosRenyiModel(randomizerCore);
            thread = new ThreadEngine(randomizer);
            thread.start();
        }
        
        if(DegreePreserving.isSelected()){
            System.out.println("You started a Degree Preserving model");
            AbstractModel randomizer;
            try {
                randomizer = new DegreePreservingModel(randomizerCore);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),e.getMessage(), "Randomizer", JOptionPane.WARNING_MESSAGE);
                return;
            }
            thread = new ThreadEngine(randomizer);
            thread.start();
        }
        
        if(StatCheck.isSelected()){
            if(!this.realnet.isEmpty()){
                if(!this.randomnet.isEmpty()){
                    //check wether a network is in both sets, which is wrong!
                    boolean flag = false;
                    for(int i=0; i<realnet.size(); i++){
                        if(randomnet.contains(realnet.get(i))){
                            flag = true;
                        }
                    }
                    if(flag==false){//then run the statistics                        
                        //now we should show the centrfinal elements to the user so then s/he could select the one to compare!
                        for(CyNetwork net : realnet){
                            ArrayList<ArrayList<Double>> liston = stat.getRealCentrality(centrfinal, net);
                            System.out.println(net.toString() + " centrality values "+liston.toString());
                        }
                        ArrayList<ArrayList<Double>> liston = stat.getRandomCentrality(centrfinal, randomnet);
                        System.out.println(randomnet.toString() + " centrality values "+liston.toString());                        
                    }
                    else{
                        JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),"a network is in both sets! choose again", "Randomizer", JOptionPane.WARNING_MESSAGE);
                        AttributeList.setEnabled(false);
                        realButton.setEnabled(true);
                        realLabel.setText("select real network(s)");
                        randomLabel.setText("select random network(s)");
                    }
                }
                else{
                    JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),"random networks not selected", "Randomizer", JOptionPane.WARNING_MESSAGE);
                    AttributeList.setEnabled(false);
                    randomButton.setEnabled(true);
                    randomLabel.setText("select random network(s)");
                }
            }
            else{
                JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),"real networks not selected", "Randomizer", JOptionPane.WARNING_MESSAGE);
                AttributeList.setEnabled(false);
                randomButton.setEnabled(true);
                realLabel.setText("select real network(s)");
            }
            AttributeList.clearSelection();
            AttributeList.setEnabled(false);
        }
    }//GEN-LAST:event_StartButtonActionPerformed

    private void ERCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ERCheckActionPerformed
        // TODO add your handling code here:
        if(ERCheck.isSelected()){
            ERN.setText("N must be greater than 0");
            ERP.setText("p must be comprised in [0-1]");
            ERM.setText("M must be less than (n*(n-1))/2");
        }
        else{
            ERN.setText("");
            ERP.setText("");
            ERM.setText("");
        }
    }//GEN-LAST:event_ERCheckActionPerformed

    private void WSCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WSCheckActionPerformed
        // TODO add your handling code here:
        if(WSCheck.isSelected()){   
            WSN.setText("N must be greater than 0");
            WSK.setText("0 < K < (n/2)");
            WSB.setText("Beta must be comprised in [0-1]");
        }
        else{   
            WSN.setText("");
            WSK.setText("");
            WSB.setText("");
        }
    }//GEN-LAST:event_WSCheckActionPerformed

    private void multiCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multiCheckActionPerformed
        // TODO add your handling code here:
        if(multiCheck.isSelected()){
            multiIsDirected.setEnabled(true);
            MultiplyFileName.setEnabled(true);
            MultiplyFileButton.setEnabled(true);
            MultiHowMany.setEnabled(true);
            MultiManyLabel.setEnabled(true);
            MultiInput.setEnabled(true);
            
        }
        else{
            multiIsDirected.setEnabled(false);
            MultiplyFileName.setEnabled(false);
            MultiplyFileButton.setEnabled(false);
            MultiHowMany.setEnabled(false);
            MultiManyLabel.setEnabled(false);
            MultiInput.setEnabled(false);
            
        }
    }//GEN-LAST:event_multiCheckActionPerformed

    private void BACheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BACheckActionPerformed
        // TODO add your handling code here:
        if(BACheck.isSelected()){   
            BAN.setText("N must be greater than 0");
            BAM.setText("0 < M < (n/2)");
        }
        else{   
            BAN.setText("");
            BAM.setText("");            
        }
    }//GEN-LAST:event_BACheckActionPerformed

    private void ERhelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ERhelpActionPerformed
        showInfo("ErdosoRonyi model",
                "ErdosoRonyi model is the simplest version of random network generators. There are two distinct variants of the model:\n" +
"\n" +
"1. G(n,M) model takes as its input the number of nodes - n, and the number of edges - M. After generating n nodes, it adds M edges to the network, choosing the endpoints of each edge uniformly from n generated nodes.\n" +
"\n" +
"2. G(n,p) model also takes the number of nodes, but instade of the number of edges, it takes the probability of there being an edge between each pair of nodes. If p = 0, then M = 0. If p = 1, then M = n(n-1)/2.\n" +
"\n" +
"The main difference between these two variants is that in the first one, number of edges is set. Second model produces, on average, pn(n-1)/2 edges."
        );

        
    }//GEN-LAST:event_ERhelpActionPerformed

    private void WShelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WShelpActionPerformed
        showInfo("Watts-Strogatz model",
                "Watt-Strogatz model is one of the simplest models which gives rise to the so called small-world phenomenon. It takes three parameters:\n" +
"\n" +
"> N - number of nodes\n" +
"> K - mean node degree, must be even\n" +
"> o - probability of edge rewireing\n" +
"\n" +
"Algorithm starts by constructing a regular ring lattice of N nodes, in which each node is connected to K other nodes on its sides (K/2 nodes on each side). If K = 2, this produces a standard cycle graph. Then, for each node n_i, with probability o, algorithm rewires the edges connecting it with nodes n_j, j > i. Rewireing means that edge (n_i, n_j) becomes (n_i, n_k) where n_k is uniformly chosen so that i != k (to avoid self-loops) and n_k isn't already connected to n_i (to avoid double edges).\n" +
"\n" +
"For o = 0, this model produces a regular ring lattice. For o = 1, it produces a completly random graph, equivalent to ErdosoRonyi G(n,M) model where n = N, M = NK/2."
        );
    }//GEN-LAST:event_WShelpActionPerformed

    private void BAHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BAHelpActionPerformed
        showInfo("Barabosi-Albert model ",
                "Barabasi-Albert model generates a scale-free network (meaning that it has a power-law degree distribution). Such networks are very often found real-world data, which makes this model useful. It takes three parameters:\n" +
"\n" +
"> N - total number of nodes\n" +
"> m0 << N - number of initial nodes\n" +
"> m <= m0 - initial node degree\n" +
"\n" +
"Algorithm begins by constructing a connected graph with m0 nodes and m*m0/2 edges (if m = m0, m(m0-1)/2 edges are constructed creating a complete graph). It then iterativly adds one node at a time until there are N nodes in total. Each new node has the initial degree of m. Its m neighbours are chosen with probability proportional to their degree. This type of node addition is called the \"preferential attachment\", meaning that the more connected a node is, the more likely it is to receive new neighbours."
        );
    }//GEN-LAST:event_BAHelpActionPerformed

    private void LATHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LATHelpActionPerformed
        showInfo("Lattice model", 
                "Lattice model creates an n-dimensional lattice.\n" +
"\n" +
"If the \"Generate torus\" feature is not selected, the model generates an n-dimensional hype rcube with a given set of edge lengths (dimension sizes). Nodes are connected if and only if their coordinates in the hyper cube are different by 1 in only one value, and equal in all the others. In other words, they are connected if and only if they share a common side.\n" +
"If the torus feature is selected, model generates an (n+1)-dimensional torus of the same sizes as the hype rcube would be. The only difference is that, with torus selected, opposite nodes are also connected.\n" +
"\n" +
"For example, if n = 1, torus feature would produce a cycle, while otherwise the model would produce a chain. If n = 2, torus produces a real torus, while otherwise model would produce a simple square lattice.\n" +
"\n" +
"Input is given in the form of comma-separated integers, all greater than one. For example, input \"3,2,3\", without the torus feature, produces a 3x2x3 cube."
        );
    }//GEN-LAST:event_LATHelpActionPerformed

    private void LATCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LATCheckActionPerformed
        // TODO add your handling code here:
        if(LATCheck.isSelected()){
            LAD.setText("Dimensions must be grater than 1");
        }
        else{
            LAD.setText("");
        }
    }//GEN-LAST:event_LATCheckActionPerformed

    private void MULTIhelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MULTIhelpActionPerformed
        // TODO add your handling code here:
        showInfo("Multiplication model","The Multiplication model will assign to each node a random weight, extracted into a range that is calculated from the attributes of the current network.\n Starting from a set of observations (attributes in the node table), a network will be constructed by multiplying each node for a value that will be computed in a range [min-max]"
                + "which is obtained from the node table itself. The new network will be topologically equivalent to the original one.\n"
                + "The addition on new nodes which are equivalent to existing nodes will affect only the global number of shortest paths, without interfering with the shortest\n paths length.");
    }//GEN-LAST:event_MULTIhelpActionPerformed

    private void RNDHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RNDHelpActionPerformed
        // TODO add your handling code here:
        showInfo("Randomize current network","The randomization of the current network permits to rewire the current network without considering the degree of the nodes. It creates a new network with the same number of edges and nodes but randomly connects the edges");
    }//GEN-LAST:event_RNDHelpActionPerformed

    private void DEGHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DEGHelpActionPerformed
        // TODO add your handling code here:
        showInfo("Degree Preserving Shuffling Algorithm","The Degree preserving suffling algorithm permits to randomize the current network considering the degree of each node this means that in the randomized network, a node will have the same number of neighbours but they can be different.");
    }//GEN-LAST:event_DEGHelpActionPerformed

    private void ERtxtNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ERtxtNActionPerformed
        // TODO add your handling code here:
        int n = Integer.parseInt(ERtxtN.getText());
        ERM.setText("M must be less than " + (n*(n-1))/2);
    }//GEN-LAST:event_ERtxtNActionPerformed

    private void WStxtNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WStxtNActionPerformed
        // TODO add your handling code here:
        if(!WStxtN.getText().isEmpty()){
            int n = Integer.parseInt(WStxtN.getText());
            WSK.setText("K must be comprised in [0-"+(n/2)+"]");
        }
        else{
            WSK.setText("0 < K < (n/2)");
        }   
    }//GEN-LAST:event_WStxtNActionPerformed

    private void BAtxtNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BAtxtNActionPerformed
        // TODO add your handling code here:
        if(!BAtxtN.getText().isEmpty()){
            int n = Integer.parseInt(BAtxtN.getText());
            BAM.setText("M must be comprised in [0-"+(n/2)+"]");
        }
        else{
            BAM.setText("0 < M < (n/2)");
        }
        
    }//GEN-LAST:event_BAtxtNActionPerformed

    private void CAcheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CAcheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CAcheckActionPerformed

    private void CAHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CAHelpActionPerformed
        showInfo("Community Affiliation model",
                "Community affiliation model is a recently constructed model which provides deeper insight into communities of social networks. It generates random networks from a set of nodes and a set of communities to which those nodes belong.\n" +
"Each community has a defined p value - the probability of an edge existing between each two nodes in the community. Nodes which share many common communities are more likely to be connected.\n" +
"\n" +
"As its input, the model takes a community data file in which each line represents one community. Line starts with a community p value, and is followed by the names of nodes inside that community, separated by spaces.\n" +
"\n" +
"For example:\n" +
"\n" +
"0.5 1 2 3\n" +
"0.95 3 4\n" +
"0.1 4 5 6\n" +
"\n" +
"Represents three communities with p values of 0.5, 0.95 and 0.1 respectively. First community consists of three nodes: \"1\", \"2\" and \"3\", second of \"3\" and \"4\", and third of \"4\", \"5\" and \"6\".\n" +
"\n" +
"Each node name is a case-sensitive string without spaces, so these are valid inputs also:\n" +
"\n" +
"0.4 David Mark\n" +
"0.8 abc123 David david\n" +
"0 12345 54321 Mark abc123"
        );
    }//GEN-LAST:event_CAHelpActionPerformed

    private void CAbtnFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CAbtnFileActionPerformed
        int returnVal = CAfileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = CAfileChooser.getSelectedFile();
            CAtxtFile.setText(file.getAbsolutePath());
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_CAbtnFileActionPerformed

    private void StatHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StatHelpActionPerformed
        // TODO add your handling code here:
        showInfo("Statistics","Select two sets of networks, one which are real-data networks and another one which represents the randomised networks. Then press Start.");
    }//GEN-LAST:event_StatHelpActionPerformed

    private void StatCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StatCheckActionPerformed
        // TODO add your handling code here:
        if(StatCheck.isSelected()){
            realButton.setEnabled(true);
            realLabel.setText("select real network(s)");
            randomLabel.setText("select random network(s)");
        }
        else{
            realButton.setEnabled(false);
            realLabel.setText("");
            randomLabel.setText("");
        }
    }//GEN-LAST:event_StatCheckActionPerformed

    private void realButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_realButtonActionPerformed
        // TODO add your handling code here:
        this.realnet = randomizerCore.cyApplicationManager.getSelectedNetworks();
        randomButton.setEnabled(true);
        System.out.println("got reals "+realnet.toString());
        realButton.setEnabled(false);
        realLabel.setText("real network(s) selected");
    }//GEN-LAST:event_realButtonActionPerformed

    private void randomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomButtonActionPerformed
        // TODO add your handling code here:
        this.randomnet = randomizerCore.cyApplicationManager.getSelectedNetworks();
        ListLabel.setEnabled(true);
        AttributeList.setEnabled(true);
        int netsn = realnet.size()+randomnet.size();
        stat = new StatisticalFunctions(randomizerCore);
        tmp = stat.getColumnNames(realnet, randomnet);
        centrfinal = stat.compareWhat(tmp, netsn);
        if(!centrfinal.isEmpty()){
            DefaultListModel lm = new DefaultListModel();
            for(String s : centrfinal){ lm.addElement(s);}
            AttributeList.setModel(lm);       
            System.out.println("shared centralities "+centrfinal.toString());
            System.out.println("got randoms "+randomnet.toString());
            randomButton.setEnabled(false);
            randomLabel.setText("random network(s) selected");
        }
        else{
            JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),"No centrality shared along the selected networks, check the attributes or select again", "Randomizer", JOptionPane.WARNING_MESSAGE);
            realButton.setEnabled(true);            
            randomButton.setEnabled(false);
            AttributeList.setEnabled(false);
            ListLabel.setEnabled(false);
            realLabel.setText("select real network(s)");
            randomLabel.setText("select random network(s)");
        }
    }//GEN-LAST:event_randomButtonActionPerformed

    private void multiIsDirectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multiIsDirectedActionPerformed
        //doing nothing special
    }//GEN-LAST:event_multiIsDirectedActionPerformed

    private void MultiplyFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MultiplyFileButtonActionPerformed
        // TODO add your handling code here:
        int returnVal = MultiplyFileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = MultiplyFileChooser.getSelectedFile();
            MultiplyFileName.setText(file.getAbsolutePath());
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_MultiplyFileButtonActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> AttributeList;
    private javax.swing.JCheckBox BACheck;
    private javax.swing.JButton BAHelp;
    private javax.swing.JLabel BAM;
    private javax.swing.JLabel BAN;
    private javax.swing.JTextField BAtxtM;
    private javax.swing.JTextField BAtxtN;
    private javax.swing.JButton CAHelp;
    private javax.swing.JButton CAbtnFile;
    private javax.swing.JCheckBox CAcheck;
    private javax.swing.JFileChooser CAfileChooser;
    private javax.swing.JTextField CAtxtFile;
    private javax.swing.JButton DEGHelp;
    private javax.swing.JCheckBox DegreePreserving;
    private javax.swing.JCheckBox ERCheck;
    private javax.swing.ButtonGroup ERGroup;
    private javax.swing.JLabel ERM;
    private javax.swing.JLabel ERN;
    private javax.swing.JLabel ERP;
    private javax.swing.JPanel ERPanel;
    private javax.swing.JButton ERhelp;
    private javax.swing.JRadioButton ERrbNMType;
    private javax.swing.JRadioButton ERrbNpType;
    private javax.swing.JTextField ERtxtM;
    private javax.swing.JTextField ERtxtN;
    private javax.swing.JTextField ERtxtP;
    private javax.swing.JButton ExitButton;
    private javax.swing.JLabel LAD;
    private javax.swing.JCheckBox LATCheck;
    private javax.swing.JButton LATHelp;
    private javax.swing.JCheckBox LATisTorus;
    private javax.swing.JTextField LATtxtDimSizes;
    private javax.swing.JLabel ListLabel;
    private javax.swing.JButton MULTIhelp;
    private javax.swing.JCheckBox MultiHowMany;
    private javax.swing.JTextField MultiInput;
    private javax.swing.JLabel MultiLabel;
    private javax.swing.JLabel MultiManyLabel;
    private javax.swing.JButton MultiplyFileButton;
    private javax.swing.JFileChooser MultiplyFileChooser;
    private javax.swing.JTextField MultiplyFileName;
    private javax.swing.JButton RNDHelp;
    private javax.swing.JCheckBox RandomizeCurrent;
    private javax.swing.JButton StartButton;
    private javax.swing.JCheckBox StatCheck;
    private javax.swing.JButton StatHelp;
    private javax.swing.JLabel WSB;
    private javax.swing.JCheckBox WSCheck;
    private javax.swing.JLabel WSK;
    private javax.swing.JLabel WSN;
    private javax.swing.JPanel WSPanel;
    private javax.swing.JPanel WSPanel1;
    private javax.swing.JPanel WSPanel2;
    private javax.swing.JButton WShelp;
    private javax.swing.JTextField WStxtBeta;
    private javax.swing.JTextField WStxtK;
    private javax.swing.JTextField WStxtN;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblM;
    private javax.swing.JLabel lblM1;
    private javax.swing.JLabel lblN;
    private javax.swing.JLabel lblN1;
    private javax.swing.JLabel lblN2;
    private javax.swing.JLabel lblP;
    private javax.swing.JLabel lblP1;
    private javax.swing.JLabel lblP2;
    private javax.swing.JLabel lblP3;
    private javax.swing.JCheckBox multiCheck;
    private javax.swing.JCheckBox multiIsDirected;
    private javax.swing.JPanel multiPanel;
    private javax.swing.JPanel multiPanel3;
    private javax.swing.JButton randomButton;
    private javax.swing.JLabel randomLabel;
    private javax.swing.JButton realButton;
    private javax.swing.JLabel realLabel;
    // End of variables declaration//GEN-END:variables
/*public void endcalculus(int totalnodecount) {
        ProgressBar.setIndeterminate(false);
        ProgressLabel.setText("Finished: " + totalnodecount + " nodes worked");
    }

    public void stopcalculus() {
        ProgressBar.setIndeterminate(false);
        ProgressLabel.setText("Interrupted by user, click start to repeat");
        MULRun.setEnabled(true);
    }

    public void calculatingresult() {
        ProgressBar.setIndeterminate(true);
        ProgressBar.setVisible(true);
        ProgressLabel.setText("Calculating...");
        MULRun.setEnabled(false);
    }

    public void updatenodecounting(int nodeworked, int totalnodecount) {
        ProgressLabel.setText("Analysing node " + nodeworked + " of " + totalnodecount);
    }*/

    
    private void setERType(){
        if(ERrbNMType.isSelected()){
            ERtxtM.setEnabled(true);
            ERtxtP.setEnabled(false);
        }
        else{
            ERtxtM.setEnabled(false);
            ERtxtP.setEnabled(true);
        }
    }

    private void showInfo(String title, String info){
        JTextArea ta = new JTextArea(info,20,90);
        ta.setLineWrap(true);
        JOptionPane.showMessageDialog(this, new JScrollPane(ta), title, JOptionPane.PLAIN_MESSAGE);
    }
    
    public void closeRandomizer() {
        randomizerCore.closeOptionsMenu();
    }
    
    public boolean iscurrentnetworkchanged() {
        return false;
    }
    
    @Override
    public Component getComponent() {
        return this;
    }
    
    /*public void startcomputation() {
        calculatingresult();
        //currentnetwork = cyApplicationManager.getCurrentNetwork();
    }*/
    
    @Override
    public CytoPanelName getCytoPanelName() {
        return CytoPanelName.WEST;
    }
    @Override
    public String getTitle() {
        return "Randomizer";
    }
    
    @Override
    public Icon getIcon() { 
        return null;
    }


}
