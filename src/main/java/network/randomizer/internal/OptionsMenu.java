/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package network.randomizer.internal;

import java.awt.Component;
import java.util.LinkedList;
import java.util.List;
import javax.swing.Icon;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import org.cytoscape.application.CyApplicationManager;
import org.cytoscape.application.swing.CySwingApplication;
import org.cytoscape.application.swing.CytoPanelComponent;
import org.cytoscape.application.swing.CytoPanelName;

/**
 *
 * @author gabriele
 */
public class OptionsMenu extends javax.swing.JPanel implements CytoPanelComponent {
    
    private RandomizerCore randomizerCore;
    public CyApplicationManager cyApplicationManager;
    public CySwingApplication cyDesktopService;
    public CyActivator cyActivator;
    public ThreadEngine thread;
    private final boolean notselected = false;


    /**
     * Creates new form OptionsMenuNew
     */
    public OptionsMenu(RandomizerCore core) {
        initComponents();
        cyActivator = core.cyActivator;
        cyApplicationManager = core.cyApplicationManager;
        cyDesktopService = core.cyDesktopService;
        randomizerCore = core;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ERGroup = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        StartButton = new javax.swing.JButton();
        ExitButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        ERPanel = new javax.swing.JPanel();
        ERtxtN = new javax.swing.JTextField();
        lblN = new javax.swing.JLabel();
        ERtxtP = new javax.swing.JTextField();
        lblP = new javax.swing.JLabel();
        ERtxtM = new javax.swing.JTextField();
        lblM = new javax.swing.JLabel();
        ERrbNpType = new javax.swing.JRadioButton();
        ERrbNMType = new javax.swing.JRadioButton();
        ERCheck = new javax.swing.JCheckBox();
        ERhelp = new javax.swing.JButton();
        ERN = new javax.swing.JLabel();
        ERP = new javax.swing.JLabel();
        ERM = new javax.swing.JLabel();
        WSPanel = new javax.swing.JPanel();
        WStxtN = new javax.swing.JTextField();
        lblN1 = new javax.swing.JLabel();
        WStxtK = new javax.swing.JTextField();
        lblP1 = new javax.swing.JLabel();
        WStxtBeta = new javax.swing.JTextField();
        lblM1 = new javax.swing.JLabel();
        WSCheck = new javax.swing.JCheckBox();
        WShelp = new javax.swing.JButton();
        WSN = new javax.swing.JLabel();
        WSK = new javax.swing.JLabel();
        WSB = new javax.swing.JLabel();
        multiPanel = new javax.swing.JPanel();
        multiRandomizeCurrent = new javax.swing.JCheckBox();
        multiIsDirected = new javax.swing.JCheckBox();
        multiCheck = new javax.swing.JCheckBox();
        MULTIhelp = new javax.swing.JButton();
        WSPanel1 = new javax.swing.JPanel();
        BAtxtN = new javax.swing.JTextField();
        lblN2 = new javax.swing.JLabel();
        BAtxtM = new javax.swing.JTextField();
        lblP2 = new javax.swing.JLabel();
        BACheck = new javax.swing.JCheckBox();
        BAHelp = new javax.swing.JButton();
        lblP3 = new javax.swing.JLabel();
        BAN = new javax.swing.JLabel();
        BAM = new javax.swing.JLabel();
        WSPanel2 = new javax.swing.JPanel();
        LATtxtDimSizes = new javax.swing.JTextField();
        LATCheck = new javax.swing.JCheckBox();
        LATHelp = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        LATisTorus = new javax.swing.JCheckBox();
        LAD = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        RandomizeCurrent = new javax.swing.JCheckBox();
        RNDHelp = new javax.swing.JButton();
        DEGHelp = new javax.swing.JButton();
        DegreePreserving = new javax.swing.JCheckBox();

        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(600, 1000));
        setRequestFocusEnabled(false);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(520, 890));
        jScrollPane1.setRequestFocusEnabled(false);

        jPanel1.setBorder(new javax.swing.border.MatteBorder(null));
        jPanel1.setPreferredSize(new java.awt.Dimension(365, 845));
        jPanel1.setRequestFocusEnabled(false);

        StartButton.setText("START");
        StartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartButtonActionPerformed(evt);
            }
        });

        ExitButton.setText("EXIT");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setText("Networks Randomizer");

        ERPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        ERtxtN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ERtxtNActionPerformed(evt);
            }
        });

        lblN.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblN.setText("n = ");

        lblP.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblP.setText("p = ");

        lblM.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblM.setText("M = ");

        ERGroup.add(ERrbNpType);
        ERrbNpType.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        ERrbNpType.setText("G(n,p)");
        ERrbNpType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ERrbNpTypeActionPerformed(evt);
            }
        });

        ERGroup.add(ERrbNMType);
        ERrbNMType.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        ERrbNMType.setText("G(n,M)");
        ERrbNMType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ERrbNMTypeActionPerformed(evt);
            }
        });

        ERCheck.setText("Erdős–Rényi model");
        ERCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ERCheckActionPerformed(evt);
            }
        });

        ERhelp.setText("?");
        ERhelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ERhelpActionPerformed(evt);
            }
        });

        ERN.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        ERN.setForeground(new java.awt.Color(255, 0, 0));

        ERP.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        ERP.setForeground(new java.awt.Color(255, 0, 0));

        ERM.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        ERM.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout ERPanelLayout = new javax.swing.GroupLayout(ERPanel);
        ERPanel.setLayout(ERPanelLayout);
        ERPanelLayout.setHorizontalGroup(
            ERPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ERPanelLayout.createSequentialGroup()
                .addGroup(ERPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ERPanelLayout.createSequentialGroup()
                        .addComponent(ERCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ERhelp))
                    .addGroup(ERPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(ERPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblM)
                            .addGroup(ERPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(ERPanelLayout.createSequentialGroup()
                                    .addComponent(ERrbNpType)
                                    .addGap(32, 32, 32)
                                    .addComponent(lblN))
                                .addGroup(ERPanelLayout.createSequentialGroup()
                                    .addComponent(ERrbNMType)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblP))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ERPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ERPanelLayout.createSequentialGroup()
                                .addComponent(ERtxtN, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ERN))
                            .addGroup(ERPanelLayout.createSequentialGroup()
                                .addComponent(ERtxtM, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ERP))
                            .addGroup(ERPanelLayout.createSequentialGroup()
                                .addComponent(ERtxtP, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ERM)))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        ERPanelLayout.setVerticalGroup(
            ERPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ERPanelLayout.createSequentialGroup()
                .addGroup(ERPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ERCheck)
                    .addComponent(ERhelp, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(ERPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ERPanelLayout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(ERrbNMType))
                    .addGroup(ERPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(ERPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ERrbNpType)
                            .addGroup(ERPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(ERtxtN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lblN)
                                .addComponent(ERN)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(ERPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ERtxtM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ERP)
                            .addComponent(lblP))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(ERPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblM)
                            .addGroup(ERPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(ERtxtP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(ERM)))))
                .addContainerGap(9, Short.MAX_VALUE))
        );

        WSPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        WSPanel.setFocusCycleRoot(true);

        WStxtN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WStxtNActionPerformed(evt);
            }
        });

        lblN1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblN1.setText("N = ");

        lblP1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblP1.setText("K = ");

        lblM1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblM1.setText("<html>&beta = </html>");

        WSCheck.setText("Watt-Strogatz model");
        WSCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WSCheckActionPerformed(evt);
            }
        });

        WShelp.setText("?");
        WShelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WShelpActionPerformed(evt);
            }
        });

        WSN.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        WSN.setForeground(new java.awt.Color(255, 0, 0));

        WSK.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        WSK.setForeground(new java.awt.Color(255, 0, 0));

        WSB.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        WSB.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout WSPanelLayout = new javax.swing.GroupLayout(WSPanel);
        WSPanel.setLayout(WSPanelLayout);
        WSPanelLayout.setHorizontalGroup(
            WSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WSPanelLayout.createSequentialGroup()
                .addGroup(WSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, WSPanelLayout.createSequentialGroup()
                        .addComponent(WSCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(WShelp))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, WSPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(WSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblM1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblP1)
                            .addComponent(lblN1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(WSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(WSPanelLayout.createSequentialGroup()
                                .addComponent(WStxtN, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(WSN))
                            .addGroup(WSPanelLayout.createSequentialGroup()
                                .addComponent(WStxtK, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(WSK))
                            .addGroup(WSPanelLayout.createSequentialGroup()
                                .addComponent(WStxtBeta, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(WSB)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        WSPanelLayout.setVerticalGroup(
            WSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WSPanelLayout.createSequentialGroup()
                .addGroup(WSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WSCheck)
                    .addComponent(WShelp, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(WSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WStxtN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblN1)
                    .addComponent(WSN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblP1)
                    .addComponent(WStxtK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(WSK))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblM1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(WStxtBeta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(WSB))
                .addContainerGap())
        );

        multiPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        multiRandomizeCurrent.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        multiRandomizeCurrent.setText("Get parameters from current network");

        multiIsDirected.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        multiIsDirected.setText("is directed");

        multiCheck.setText("Multiplication model");
        multiCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiCheckActionPerformed(evt);
            }
        });

        MULTIhelp.setText("?");
        MULTIhelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MULTIhelpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout multiPanelLayout = new javax.swing.GroupLayout(multiPanel);
        multiPanel.setLayout(multiPanelLayout);
        multiPanelLayout.setHorizontalGroup(
            multiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(multiPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(multiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(multiRandomizeCurrent)
                    .addComponent(multiIsDirected))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(multiPanelLayout.createSequentialGroup()
                .addComponent(multiCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MULTIhelp)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        multiPanelLayout.setVerticalGroup(
            multiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(multiPanelLayout.createSequentialGroup()
                .addGroup(multiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(multiCheck)
                    .addComponent(MULTIhelp, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addComponent(multiRandomizeCurrent)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(multiIsDirected)
                .addGap(220, 220, 220))
        );

        WSPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        BAtxtN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BAtxtNActionPerformed(evt);
            }
        });

        lblN2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblN2.setText("N = ");

        lblP2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblP2.setText("m = ");

        BACheck.setText("Barabási-Albert model");
        BACheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BACheckActionPerformed(evt);
            }
        });

        BAHelp.setText("?");
        BAHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BAHelpActionPerformed(evt);
            }
        });

        lblP3.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        lblP3.setText("<< N");

        BAN.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        BAN.setForeground(new java.awt.Color(255, 0, 0));

        BAM.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        BAM.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout WSPanel1Layout = new javax.swing.GroupLayout(WSPanel1);
        WSPanel1.setLayout(WSPanel1Layout);
        WSPanel1Layout.setHorizontalGroup(
            WSPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WSPanel1Layout.createSequentialGroup()
                .addGroup(WSPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(WSPanel1Layout.createSequentialGroup()
                        .addComponent(BACheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(BAHelp))
                    .addGroup(WSPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(WSPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblN2)
                            .addComponent(lblP2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(WSPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BAtxtM, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BAtxtN, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblP3)
                        .addGap(36, 36, 36)
                        .addGroup(WSPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BAM)
                            .addComponent(BAN))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        WSPanel1Layout.setVerticalGroup(
            WSPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WSPanel1Layout.createSequentialGroup()
                .addGroup(WSPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BACheck)
                    .addComponent(BAHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(WSPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BAtxtN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblN2)
                    .addComponent(BAN))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WSPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblP2)
                    .addComponent(BAtxtM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblP3)
                    .addComponent(BAM))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        WSPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        LATCheck.setText("Lattice model");
        LATCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LATCheckActionPerformed(evt);
            }
        });

        LATHelp.setText("?");
        LATHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LATHelpActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jLabel2.setText("Insert the Dimension sizes separated by comma (e.g., \"2,3,2\")");

        LATisTorus.setText("Generate hyper torus");

        LAD.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        LAD.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout WSPanel2Layout = new javax.swing.GroupLayout(WSPanel2);
        WSPanel2.setLayout(WSPanel2Layout);
        WSPanel2Layout.setHorizontalGroup(
            WSPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WSPanel2Layout.createSequentialGroup()
                .addGroup(WSPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(WSPanel2Layout.createSequentialGroup()
                        .addComponent(LATCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LATHelp))
                    .addGroup(WSPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(LATtxtDimSizes, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LAD)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(WSPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(WSPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LATisTorus))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        WSPanel2Layout.setVerticalGroup(
            WSPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WSPanel2Layout.createSequentialGroup()
                .addGroup(WSPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LATCheck)
                    .addComponent(LATHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(WSPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LATtxtDimSizes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LAD))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(LATisTorus)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        RandomizeCurrent.setText("Randomize current network");
        RandomizeCurrent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RandomizeCurrentActionPerformed(evt);
            }
        });

        RNDHelp.setText("?");
        RNDHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RNDHelpActionPerformed(evt);
            }
        });

        DEGHelp.setText("?");
        DEGHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DEGHelpActionPerformed(evt);
            }
        });

        DegreePreserving.setText("Randomize current network, preserving the Degree");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(RandomizeCurrent)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(RNDHelp))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(DegreePreserving)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(DEGHelp)))
                .addContainerGap(121, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RandomizeCurrent)
                    .addComponent(RNDHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DEGHelp, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(DegreePreserving))
                .addContainerGap(57, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(WSPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(multiPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(WSPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(WSPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(StartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(61, 61, 61)
                                .addComponent(ExitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(ERPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ERPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(WSPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(WSPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(WSPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(multiPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 163, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ExitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(StartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 596, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        // TODO add your handling code here:
        System.out.println("closing randomizer");
        closeRandomizer();
    }//GEN-LAST:event_ExitButtonActionPerformed

    private void ERrbNpTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ERrbNpTypeActionPerformed
        setERType();
    }//GEN-LAST:event_ERrbNpTypeActionPerformed

    private void ERrbNMTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ERrbNMTypeActionPerformed
        setERType();
    }//GEN-LAST:event_ERrbNMTypeActionPerformed

    private void RandomizeCurrentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RandomizeCurrentActionPerformed
        
    }//GEN-LAST:event_RandomizeCurrentActionPerformed

    private void StartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartButtonActionPerformed
        // TODO add your handling code here:
        if(ERCheck.isSelected()){
            System.out.println("You started an Erdos-Renyi model");
            AbstractModel randomizer;
            
            // randomize current network
            if(RandomizeCurrent.isSelected()){
                randomizer = new ErdosRenyiModel(randomizerCore);
            }
            
            // generate random network
            else{
                try {
                    int n = Integer.parseInt(ERtxtN.getText());
                    if(n < 0) throw new Exception("Parameter n less than zero!");
                    ErdosRenyiModel.ERType type;
                    // G(N,M) model is selected
                    if(ERrbNMType.isSelected()){
                        type = ErdosRenyiModel.ERType.nM;
                        int M = Integer.parseInt(ERtxtM.getText());
                        if(M < 0) throw new Exception("Parameter M less than zero!");
                        if(M > n*(n-1)/2) throw new Exception("Parameter M larger than possible number of edges!\nFor n = " + n + ", maximum M = " + (n*(n-1)/2) + ".");
                        randomizer = new ErdosRenyiModel(n, M, 0, type, randomizerCore);
                    }
                    // G(N,p) model is selected
                    else if(ERrbNpType.isSelected()){
                        type = ErdosRenyiModel.ERType.np;
                        float p = Float.parseFloat(ERtxtP.getText());
                        if(p < 0 || p > 1) throw new Exception("Parameter p out of  the range [0,1]!");
                        randomizer = new ErdosRenyiModel(n, 0, p, type, randomizerCore);
                    }
                    else{
                        throw new Exception("Type of Erdos-Renyi model isn't selected. Choose one!");
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),e.getMessage(), "Randomizer", JOptionPane.WARNING_MESSAGE);
                    return;
                }
            }
            thread = new ThreadEngine(randomizer);
            thread.start();            
        }
        
        if(WSCheck.isSelected()){
            System.out.println("You started a Watts-Strogatz model");
            AbstractModel randomizer;
            // generate random network
            try {
                int N = Integer.parseInt(WStxtN.getText());
                if(N < 0) throw new Exception("Parameter N less than zero!");
                int K = Integer.parseInt(WStxtK.getText());
                if(K < 0) throw new Exception("Parameter K less than zero!");
                if(K > N/2) throw new Exception("Parameter K must be less than N/2!");
                float beta = Float.parseFloat(WStxtBeta.getText());
                if(beta < 0 || beta > 1) throw new Exception("Parameter beta must be in [0,1]!");
                randomizer = new WattsStrogatzModel(randomizerCore, N, K, beta);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),e.getMessage(), "Randomizer", JOptionPane.WARNING_MESSAGE);
                return;
            }
            thread = new ThreadEngine(randomizer);
            thread.start();
        }
        
        if(BACheck.isSelected()){
            System.out.println("You started a Barabasi-Albert model");
            AbstractModel randomizer;
            // generate random network
            try {
                int N = Integer.parseInt(BAtxtN.getText());
                if(N < 0) throw new Exception("Parameter N less than zero!");
                int m = Integer.parseInt(BAtxtM.getText());
                if(m < 0) throw new Exception("Parameter m less than zero!");
                if(m > N/2) throw new Exception("Parameter m too large!");
                randomizer = new BarabasiAlbertModel(randomizerCore, N, m);
            } catch (Exception e) {
                String message = e.getMessage();
                if(message.equals("")){
                    message = "Some arguments missing or of wrong format!";
                }
                JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(), message, "Randomizer", JOptionPane.WARNING_MESSAGE);
                return;
            }
            thread = new ThreadEngine(randomizer);
            thread.start();
        }
        
        if(LATCheck.isSelected()){
            System.out.println("You started a Random Lattice model");
            AbstractModel randomizer;
            // generate random network
            try {
                String[] stringDims = LATtxtDimSizes.getText().split(",");
                List<Integer> dims = new LinkedList<>();
                for(int i = 0; i < stringDims.length ; i++)
                    dims.add(Integer.parseInt(stringDims[i]));
                for (Integer dim : dims) {
                    if(dim < 1){
                        throw new Exception("All dimensions must be greater then 1.");
                    }
                }
                randomizer = new LatticeModel(randomizerCore, dims, LATisTorus.isSelected());
            } catch(NumberFormatException e){
                String message = "Wrong random lattice dimension sizes input format!\nPlease use comma seperated integer values only.";
                JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(), message, "Randomizer", JOptionPane.WARNING_MESSAGE);
                return;
            } catch (Exception e) {
                String message = e.getMessage();
                if(message.equals("")){
                    message = "Wrong random lattice dimension sizes input format!\nPlease use comma seperated integer values only.";
                }
                JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(), message, "Randomizer", JOptionPane.WARNING_MESSAGE);
                return;
            }
            thread = new ThreadEngine(randomizer);
            thread.start();
        }
        
        if(multiCheck.isSelected()){
            System.out.println("You started a Multiplication model");
            AbstractModel randomizer;            
            boolean direction = multiIsDirected.isSelected();//is the network directed???????
            System.out.println("direction "+direction);
            // using network randomization
            if(multiRandomizeCurrent.isSelected()) {
                if (cyApplicationManager.getCurrentNetworkView() == null){
                    JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),"No views available for your network (is the network missing?)", "Randomizer", JOptionPane.WARNING_MESSAGE);
                }
                else{
                    if(cyApplicationManager.getCurrentNetworkView().getModel().getNodeList().isEmpty()){
                        JOptionPane.showMessageDialog(this.cyDesktopService.getJFrame(),"The network contains zero nodes", "Randomizer", JOptionPane.WARNING_MESSAGE);
                    }
                    else{
                        randomizer = new MultiplicationModel(randomizerCore,direction);
                        thread = new ThreadEngine(randomizer);
                        thread.start();                        
                    }
                }
            }
        }
    }//GEN-LAST:event_StartButtonActionPerformed

    private void ERCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ERCheckActionPerformed
        // TODO add your handling code here:
        if(ERCheck.isSelected()){
            ERN.setText("N must be greater than 0");
            ERP.setText("p must be comprised in [0-1]");
            ERM.setText("M must be less than (n*(n-1))/2");
        }
        else{
            ERN.setText("");
            ERP.setText("");
            ERM.setText("");
        }
    }//GEN-LAST:event_ERCheckActionPerformed

    private void WSCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WSCheckActionPerformed
        // TODO add your handling code here:
        if(WSCheck.isSelected()){   
            WSN.setText("N must be greater than 0");
            WSK.setText("0 < K < (n/2)");
            WSB.setText("Beta must be comprised in [0-1]");
        }
        else{   
            WSN.setText("");
            WSK.setText("");
            WSB.setText("");
        }
    }//GEN-LAST:event_WSCheckActionPerformed

    private void multiCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multiCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_multiCheckActionPerformed

    private void BACheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BACheckActionPerformed
        // TODO add your handling code here:
        if(BACheck.isSelected()){   
            BAN.setText("N must be greater than 0");
            BAM.setText("0 < M < (n/2)");
        }
        else{   
            BAN.setText("");
            BAM.setText("");            
        }
    }//GEN-LAST:event_BACheckActionPerformed

    private void ERhelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ERhelpActionPerformed
        showInfo("ErdosoRonyi model",
                "ErdosoRonyi model is the simplest version of random network generators. There are two distinct variants of the model:\n" +
"\n" +
"1. G(n,M) model takes as its input the number of nodes - n, and the number of edges - M. After generating n nodes, it adds M edges to the network, choosing the endpoints of each edge uniformly from n generated nodes.\n" +
"\n" +
"2. G(n,p) model also takes the number of nodes, but instade of the number of edges, it takes the probability of there being an edge between each pair of nodes. If p = 0, then M = 0. If p = 1, then M = n(n-1)/2.\n" +
"\n" +
"The main difference between these two variants is that in the first one, number of edges is set. Second model produces, on average, pn(n-1)/2 edges."
        );

        
    }//GEN-LAST:event_ERhelpActionPerformed

    private void WShelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WShelpActionPerformed
        showInfo("Watts-Strogatz model",
                "Watt-Strogatz model is one of the simplest models which gives rise to the so called small-world phenomenon. It takes three parameters:\n" +
"\n" +
"> N - number of nodes\n" +
"> K - mean node degree, must be even\n" +
"> o - probability of edge rewireing\n" +
"\n" +
"Algorithm starts by constructing a regular ring lattice of N nodes, in which each node is connected to K other nodes on its sides (K/2 nodes on each side). If K = 2, this produces a standard cycle graph. Then, for each node n_i, with probability o, algorithm rewires the edges connecting it with nodes n_j, j > i. Rewireing means that edge (n_i, n_j) becomes (n_i, n_k) where n_k is uniformly chosen so that i != k (to avoid self-loops) and n_k isn't already connected to n_i (to avoid double edges).\n" +
"\n" +
"For o = 0, this model produces a regular ring lattice. For o = 1, it produces a completly random graph, equivalent to ErdosoRonyi G(n,M) model where n = N, M = NK/2."
        );
    }//GEN-LAST:event_WShelpActionPerformed

    private void BAHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BAHelpActionPerformed
        showInfo("Barabosi-Albert model ",
                "Barabasi-Albert model generates a scale-free network (meaning that it has a power-law degree distribution). Such networks are very often found real-world data, which makes this model useful. It takes three parameters:\n" +
"\n" +
"> N - total number of nodes\n" +
"> m0 << N - number of initial nodes\n" +
"> m <= m0 - initial node degree\n" +
"\n" +
"Algorithm begins by constructing a connected graph with m0 nodes and m*m0/2 edges (if m = m0, m(m0-1)/2 edges are constructed creating a complete graph). It then iterativly adds one node at a time until there are N nodes in total. Each new node has the initial degree of m. Its m neighbours are chosen with probability proportional to their degree. This type of node addition is called the \"preferential attachment\", meaning that the more connected a node is, the more likely it is to receive new neighbours."
        );
    }//GEN-LAST:event_BAHelpActionPerformed

    private void LATHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LATHelpActionPerformed
        showInfo("Lattice model", 
                "Lattice model creates an n-dimensional lattice.\n" +
"\n" +
"If the \"Generate torus\" feature is not selected, the model generates an n-dimensional hype rcube with a given set of edge lengths (dimension sizes). Nodes are connected if and only if their coordinates in the hyper cube are different by 1 in only one value, and equal in all the others. In other words, they are connected if and only if they share a common side.\n" +
"If the torus feature is selected, model generates an (n+1)-dimensional torus of the same sizes as the hype rcube would be. The only difference is that, with torus selected, opposite nodes are also connected.\n" +
"\n" +
"For example, if n = 1, torus feature would produce a cycle, while otherwise the model would produce a chain. If n = 2, torus produces a real torus, while otherwise model would produce a simple square lattice.\n" +
"\n" +
"Input is given in the form of comma-separated integers, all greater than one. For example, input \"3,2,3\", without the torus feature, produces a 3x2x3 cube."
        );
    }//GEN-LAST:event_LATHelpActionPerformed

    private void LATCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LATCheckActionPerformed
        // TODO add your handling code here:
        if(LATCheck.isSelected()){
            LAD.setText("Dimensions must be grater than 1");
        }
        else{
            LAD.setText("");
        }
    }//GEN-LAST:event_LATCheckActionPerformed

    private void MULTIhelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MULTIhelpActionPerformed
        // TODO add your handling code here:
        showInfo("Multiplication model","The Multiplication model will assign to each node a random weight, extracted into a range that is calculated from the attributes of the current network.\n Starting from a set of observations (attributes in the node table), a network will be constructed by multiplying each node for a value that will be computed in a range [min-max]"
                + "which is obtained from the node table itself. The new network will be topologically equivalent to the original one.\n"
                + "The addition on new nodes which are equivalent to existing nodes will affect only the global number of shortest paths, without interfering with the shortest\n paths length.");
    }//GEN-LAST:event_MULTIhelpActionPerformed

    private void RNDHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RNDHelpActionPerformed
        // TODO add your handling code here:
        showInfo("Randomize current network","The randomization of the current network permits to rewire the current network without considering the degree of the nodes. It creates a new network with the same number of edges and nodes but randomly connects the edges");
    }//GEN-LAST:event_RNDHelpActionPerformed

    private void DEGHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DEGHelpActionPerformed
        // TODO add your handling code here:
        showInfo("Degree Preserving Shuffling Algorithm","The Degree preserving suffling algorithm permits to randomize the current network considering the degree of each node this means that in the randomized network, a node will have the same number of neighbours but they can be different.");
    }//GEN-LAST:event_DEGHelpActionPerformed

    private void ERtxtNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ERtxtNActionPerformed
        // TODO add your handling code here:
        int n = Integer.parseInt(ERtxtN.getText());
        ERM.setText("M must be less than " + (n*(n-1))/2);
    }//GEN-LAST:event_ERtxtNActionPerformed

    private void WStxtNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WStxtNActionPerformed
        // TODO add your handling code here:
        if(!WStxtN.getText().isEmpty()){
            int n = Integer.parseInt(WStxtN.getText());
            WSK.setText("K must be comprised in [0-"+(n/2)+"]");
        }
        else{
            WSK.setText("0 < K < (n/2)");
        }   
    }//GEN-LAST:event_WStxtNActionPerformed

    private void BAtxtNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BAtxtNActionPerformed
        // TODO add your handling code here:
        if(!BAtxtN.getText().isEmpty()){
            int n = Integer.parseInt(BAtxtN.getText());
            BAM.setText("M must be comprised in [0-"+(n/2)+"]");
        }
        else{
            BAM.setText("0 < M < (n/2)");
        }
        
    }//GEN-LAST:event_BAtxtNActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox BACheck;
    private javax.swing.JButton BAHelp;
    private javax.swing.JLabel BAM;
    private javax.swing.JLabel BAN;
    private javax.swing.JTextField BAtxtM;
    private javax.swing.JTextField BAtxtN;
    private javax.swing.JButton DEGHelp;
    private javax.swing.JCheckBox DegreePreserving;
    private javax.swing.JCheckBox ERCheck;
    private javax.swing.ButtonGroup ERGroup;
    private javax.swing.JLabel ERM;
    private javax.swing.JLabel ERN;
    private javax.swing.JLabel ERP;
    private javax.swing.JPanel ERPanel;
    private javax.swing.JButton ERhelp;
    private javax.swing.JRadioButton ERrbNMType;
    private javax.swing.JRadioButton ERrbNpType;
    private javax.swing.JTextField ERtxtM;
    private javax.swing.JTextField ERtxtN;
    private javax.swing.JTextField ERtxtP;
    private javax.swing.JButton ExitButton;
    private javax.swing.JLabel LAD;
    private javax.swing.JCheckBox LATCheck;
    private javax.swing.JButton LATHelp;
    private javax.swing.JCheckBox LATisTorus;
    private javax.swing.JTextField LATtxtDimSizes;
    private javax.swing.JButton MULTIhelp;
    private javax.swing.JButton RNDHelp;
    private javax.swing.JCheckBox RandomizeCurrent;
    private javax.swing.JButton StartButton;
    private javax.swing.JLabel WSB;
    private javax.swing.JCheckBox WSCheck;
    private javax.swing.JLabel WSK;
    private javax.swing.JLabel WSN;
    private javax.swing.JPanel WSPanel;
    private javax.swing.JPanel WSPanel1;
    private javax.swing.JPanel WSPanel2;
    private javax.swing.JButton WShelp;
    private javax.swing.JTextField WStxtBeta;
    private javax.swing.JTextField WStxtK;
    private javax.swing.JTextField WStxtN;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblM;
    private javax.swing.JLabel lblM1;
    private javax.swing.JLabel lblN;
    private javax.swing.JLabel lblN1;
    private javax.swing.JLabel lblN2;
    private javax.swing.JLabel lblP;
    private javax.swing.JLabel lblP1;
    private javax.swing.JLabel lblP2;
    private javax.swing.JLabel lblP3;
    private javax.swing.JCheckBox multiCheck;
    private javax.swing.JCheckBox multiIsDirected;
    private javax.swing.JPanel multiPanel;
    private javax.swing.JCheckBox multiRandomizeCurrent;
    // End of variables declaration//GEN-END:variables
/*public void endcalculus(int totalnodecount) {
        ProgressBar.setIndeterminate(false);
        ProgressLabel.setText("Finished: " + totalnodecount + " nodes worked");
    }

    public void stopcalculus() {
        ProgressBar.setIndeterminate(false);
        ProgressLabel.setText("Interrupted by user, click start to repeat");
        MULRun.setEnabled(true);
    }

    public void calculatingresult() {
        ProgressBar.setIndeterminate(true);
        ProgressBar.setVisible(true);
        ProgressLabel.setText("Calculating...");
        MULRun.setEnabled(false);
    }

    public void updatenodecounting(int nodeworked, int totalnodecount) {
        ProgressLabel.setText("Analysing node " + nodeworked + " of " + totalnodecount);
    }*/

    
    private void setERType(){
        if(ERrbNMType.isSelected()){
            ERtxtM.setEnabled(true);
            ERtxtP.setEnabled(false);
        }
        else{
            ERtxtM.setEnabled(false);
            ERtxtP.setEnabled(true);
        }
    }

    private void showInfo(String title, String info){
        JTextArea ta = new JTextArea(info,20,90);
        ta.setLineWrap(true);
        JOptionPane.showMessageDialog(this, new JScrollPane(ta), title, JOptionPane.PLAIN_MESSAGE);
    }
    
    public void closeRandomizer() {
        randomizerCore.closeOptionsMenu();
    }
    
    public boolean iscurrentnetworkchanged() {
        return false;
    }
    
    @Override
    public Component getComponent() {
        return this;
    }
    
    /*public void startcomputation() {
        calculatingresult();
        //currentnetwork = cyApplicationManager.getCurrentNetwork();
    }*/
    
    @Override
    public CytoPanelName getCytoPanelName() {
        return CytoPanelName.WEST;
    }
    @Override
    public String getTitle() {
        return "Randomizer";
    }
    
    @Override
    public Icon getIcon() { 
        return null;
    }


}
